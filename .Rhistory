d_tr_all_obs <- d_tr_all_obs[which(!duplicated(d_tr_all_obs)), ] # Table with all sampled fields, which observer sampled it and wind and temperature
sp <- d[which(d$Species == s_good[xxx]), which(colnames(d) %in% c("Year", "Banda", "transectID", "T_Y", "Species", "Observer", "Cluster", "Wind", "Temp"))] # Select species spAL and all years
sp <- arrange(sp, Year, transectID) #Ordered
sp_detec_transectID <- unique(sp$transectID)
sp$Observer <- as.character(sp$Observer)
absent <- anti_join(d_tr_all,sp) # Transects with 0 abundance, add to sp.
colnames(absent)[2] <- "Banda" # Format it to add the rows to sp
absent$T_Y <- as.character(absent$T_Y)
absent$Species <- s_good[xxx]
absent$Cluster <- NA
absent <- left_join(absent, d_tr_all_obs)
for (i in 1:nrow(absent)){ # Format to join absent - detections
cent <- substr(absent$T_Y[i], 10,10) # To include SI102 (cents)
cent <- as.numeric(cent)
if(is.na(cent)){
absent$Year[i] <- substr(absent$T_Y[i], 6,9)
absent$transectID[i] <- substr(absent$T_Y[i], 1,4)
} else { absent$Year[i] <- substr(absent$T_Y[i], 7,10)
absent$transectID[i] <- substr(absent$T_Y[i], 1,5)}
}
absent$count <- 0
sp$count <- 1
all_sp <- rbind(sp,absent) # Include transects with abundance 0
all_sp <- arrange(all_sp, Year, transectID) # Ordered
absent$count <- 0
##                       Prepare data                           ###
###################################################################
#setwd("C:/Users/Ana/Documents/PhD/Second chapter/Data")
setwd("S:/PhD/Second chapter/Data")
d <- read.csv("DataDS_ready_ALL.csv")
colnames(d)[which(colnames(d) == "Count")] <- "Cluster"
# Load species names
s <- read.csv("sp_trend_dg.csv", sep = ";")
s_good <- as.vector(s$Species[which(s$include_samplesize == 1)])
problems <- c("CIJUN", "COCOT", "OEHIS", "TUMER", "TUVIS")
s_good <- s_good[-which(s_good %in% problems)]
s_doubt <- as.vector(s$Species[which(s$Doubt_samplesize == 1)])
# Start loop
xxx = 36
# To take into account transects with abundance 0
# 1. Select all transects IDs from all species observations
# 2. Join the observations of MECAL (for example) with all transects so that they remain with NA if the
# species was there but it wasnt sampled
d_tr <- d[ ,which(colnames(d) %in% c("Species",  "T_Y", "Observer", "Temp", "Wind"))]
d_tr_all <- data.frame(T_Y = unique(d_tr$T_Y), id = NA)
d_tr$Observer <- as.character(d_tr$Observer)
d_tr_all_obs <- left_join(d_tr_all, d_tr)
d_tr_all_obs <- d_tr_all_obs[ ,c(1,4,5,6)]
d_tr_all_obs <- d_tr_all_obs[which(!duplicated(d_tr_all_obs)), ] # Table with all sampled fields, which observer sampled it and wind and temperature
sp <- d[which(d$Species == s_good[xxx]), which(colnames(d) %in% c("Year", "Banda", "transectID", "T_Y", "Species", "Observer", "Cluster", "Wind", "Temp"))] # Select species spAL and all years
sp <- arrange(sp, Year, transectID) #Ordered
sp_detec_transectID <- unique(sp$transectID)
sp$Observer <- as.character(sp$Observer)
absent <- anti_join(d_tr_all,sp) # Transects with 0 abundance, add to sp.
colnames(absent)[2] <- "Banda" # Format it to add the rows to sp
absent$T_Y <- as.character(absent$T_Y)
absent$Species <- s_good[xxx]
absent$Cluster <- NA
absent <- left_join(absent, d_tr_all_obs)
for (i in 1:nrow(absent)){ # Format to join absent - detections
cent <- substr(absent$T_Y[i], 10,10) # To include SI102 (cents)
cent <- as.numeric(cent)
if(is.na(cent)){
absent$Year[i] <- substr(absent$T_Y[i], 6,9)
absent$transectID[i] <- substr(absent$T_Y[i], 1,4)
} else { absent$Year[i] <- substr(absent$T_Y[i], 7,10)
absent$transectID[i] <- substr(absent$T_Y[i], 1,5)}
}
absent$count <- 0
sp$count <- 1
all_sp <- rbind(sp,absent) # Include transects with abundance 0
all_sp <- arrange(all_sp, Year, transectID) # Ordered
absent$count <- 0
###################################################################
##                       HDS ANALYSIS                           ###
###################################################################
# ---- Information: bins, years, sites ----
strip.width <- 200
dist.breaks <- c(0,25,50,100,200)
int.w <- diff(dist.breaks) # width of distance categories (v)
midpt <- diff(dist.breaks)/2+dist.breaks[-5]
nG <- length(dist.breaks)-1
yrs <- c(2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018) # I HAVE TO CONVERT THIS FROM 0-7 (but nyrs is still 8!)
nyrs <- length(yrs)
# ---- Distance observations ----
# Format
all.sites <- unique(all_sp$transectID)
all.sites <- sort(all.sites,descreasing = TRUE)
max.sites <- length(all.sites)
m <- matrix(NA, nrow = length(all.sites), ncol = nyrs)
rownames(m) <- all.sites
colnames(m) <- yrs
# Add counts > 0
count <- aggregate(Species ~ Year + transectID, FUN = length, data = sp)
for (i in 1:nrow(count)){
m[which(rownames(m) %in% count$transectID[i]), which(colnames(m) %in% count$Year[i])] <- count$Species[i]
}
# Add absences (0)
for (i in 1:nrow(absent)){
m[which(rownames(m) %in% absent$transectID[i]), which(colnames(m) %in% absent$Year[i])] <- absent$count[i]
}
# Only to check: Count of individuals per year
count.year <- colSums(m,na.rm = TRUE)
# Count of individuals per year corrected by cluster size
average_clus <- mean(sp$Cluster) # TO INCLUDE IN THE MODEL
count.year_clus <- count.year*average_clus
# Year
yrs2 <- c(0, 1, 2, 3, 4, 5, 6, 7, 8) # To make it as a continuous variable, otherwise it doesnt work
year <- matrix(NA,nrow = max.sites, ncol = nyrs)
colnames(year) <- yrs
for (i in 1:nyrs){
year[ ,which(colnames(year) %in% yrs[i])] <- rep(yrs2[i], max.sites)
}
# Observer
# Format
obs <- matrix(NA, nrow = max.sites, ncol = nyrs)
rownames(obs) <- all.sites
colnames(obs) <- yrs
# Add observers for fields with counts > 0
for (i in 1:nrow(sp)){
obs[which(rownames(obs) %in% sp$transectID[i]), which(colnames(obs) %in% sp$Year[i])] <- sp$Observer[i]
}
# Add observers for fields with absences (0)
for (i in 1:nrow(absent)){
obs[which(rownames(obs) %in% absent$transectID[i]), which(colnames(obs) %in% absent$Year[i])] <- absent$Observer[i]
}
obs
# Format
temp <- matrix(NA, nrow = max.sites, ncol = nyrs)
rownames(temp) <- all.sites
colnames(temp) <- yrs
# Add temper for fields with counts > 0
for (i in 1:nrow(sp)){
temp[which(rownames(temp) %in% sp$transectID[i]), which(colnames(temp) %in% sp$Year[i])] <- sp$Temp[i]
}
# Add temper for fields with absences (0)
for (i in 1:nrow(absent)){
temp[which(rownames(temp) %in% absent$transectID[i]), which(colnames(temp) %in% absent$Year[i])] <- absent$Temp[i]
}
temp
obs
# Wind
# Format
wind <- matrix(NA, nrow = max.sites, ncol = nyrs)
rownames(wind) <- all.sites
colnames(wind) <- yrs
# Add wind for fields with counts > 0
for (i in 1:nrow(sp)){
wind[which(rownames(wind) %in% sp$transectID[i]), which(colnames(wind) %in% sp$Year[i])] <- sp$Wind[i]
}
# Add wind for fields with absences (0)
for (i in 1:nrow(absent)){
wind[which(rownames(wind) %in% absent$transectID[i]), which(colnames(wind) %in% absent$Year[i])] <- absent$Wind[i]
}
wind
unique(factor(temp))
temp[which(is.na(temp))]
unique(factor(temp))
temp_id <- unique(factor(temp))[-1]
temp[which(is.na(temp))] <- sample(temp_id, length(which(is.na(temp))), replace = TRUE) # No NA in covariate
temp
# Matrix with wind (put random values where NA)
unique(factor(wind))
wind_id <- unique(factor(wind))[-1]
wind[which(is.na(wind))] <- sample(wind_id, length(which(is.na(wind))), replace = TRUE) # No NA in covariate
wind
nyrs
y.sum
m
ob
ob <- matrix(as.numeric(factor(obs)), nrow = max.sites, ncol = nyrs) # JAGS doesn't accept categorical variables
unique(factor(ob))
obs_id <- unique(factor(ob))[-1]
ob[which(is.na(ob))] <- sample(obs_id, length(which(is.na(ob))), replace = TRUE) # No NA in covariate
ob
year_number
###################################################################
#setwd("C:/Users/Ana/Documents/PhD/Second chapter/Data")
setwd("S:/PhD/Second chapter/Data")
d <- read.csv("DataDS_ready_ALL.csv")
colnames(d)[which(colnames(d) == "Count")] <- "Cluster"
# Load species names
s <- read.csv("sp_trend_dg.csv", sep = ";")
s_good <- as.vector(s$Species[which(s$include_samplesize == 1)])
problems <- c("CIJUN", "COCOT", "OEHIS", "TUMER", "TUVIS")
s_good <- s_good[-which(s_good %in% problems)]
s_doubt <- as.vector(s$Species[which(s$Doubt_samplesize == 1)])
# Start loop
xxx = 36
# To take into account transects with abundance 0
# 1. Select all transects IDs from all species observations
# 2. Join the observations of MECAL (for example) with all transects so that they remain with NA if the
# species was there but it wasnt sampled
d_tr <- d[ ,which(colnames(d) %in% c("Species",  "T_Y", "Observer", "Temp", "Wind"))]
d_tr_all <- data.frame(T_Y = unique(d_tr$T_Y), id = NA)
d_tr$Observer <- as.character(d_tr$Observer)
d_tr_all_obs <- left_join(d_tr_all, d_tr)
d_tr_all_obs <- d_tr_all_obs[ ,c(1,4,5,6)]
d_tr_all_obs <- d_tr_all_obs[which(!duplicated(d_tr_all_obs)), ] # Table with all sampled fields, which observer sampled it and wind and temperature
sp <- d[which(d$Species == s_good[xxx]), which(colnames(d) %in% c("Year", "Banda", "transectID", "T_Y", "Species", "Observer", "Cluster", "Wind", "Temp"))] # Select species spAL and all years
sp <- arrange(sp, Year, transectID) #Ordered
sp_detec_transectID <- unique(sp$transectID)
sp$Observer <- as.character(sp$Observer)
absent <- anti_join(d_tr_all,sp) # Transects with 0 abundance, add to sp.
colnames(absent)[2] <- "Banda" # Format it to add the rows to sp
absent$T_Y <- as.character(absent$T_Y)
absent$Species <- s_good[xxx]
absent$Cluster <- NA
absent <- left_join(absent, d_tr_all_obs)
for (i in 1:nrow(absent)){ # Format to join absent - detections
cent <- substr(absent$T_Y[i], 10,10) # To include SI102 (cents)
cent <- as.numeric(cent)
if(is.na(cent)){
absent$Year[i] <- substr(absent$T_Y[i], 6,9)
absent$transectID[i] <- substr(absent$T_Y[i], 1,4)
} else { absent$Year[i] <- substr(absent$T_Y[i], 7,10)
absent$transectID[i] <- substr(absent$T_Y[i], 1,5)}
}
absent$count <- 0
sp$count <- 1
all_sp <- rbind(sp,absent) # Include transects with abundance 0
all_sp <- arrange(all_sp, Year, transectID) # Ordered
absent$count <- 0
###################################################################
##                       HDS ANALYSIS                           ###
###################################################################
# ---- Information: bins, years, sites ----
strip.width <- 200
dist.breaks <- c(0,25,50,100,200)
int.w <- diff(dist.breaks) # width of distance categories (v)
midpt <- diff(dist.breaks)/2+dist.breaks[-5]
nG <- length(dist.breaks)-1
yrs <- c(2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018) # I HAVE TO CONVERT THIS FROM 0-7 (but nyrs is still 8!)
nyrs <- length(yrs)
# ---- Distance observations ----
# Format
all.sites <- unique(all_sp$transectID)
all.sites <- sort(all.sites,descreasing = TRUE)
max.sites <- length(all.sites)
m <- matrix(NA, nrow = length(all.sites), ncol = nyrs)
rownames(m) <- all.sites
colnames(m) <- yrs
# Add counts > 0
count <- aggregate(Species ~ Year + transectID, FUN = length, data = sp)
for (i in 1:nrow(count)){
m[which(rownames(m) %in% count$transectID[i]), which(colnames(m) %in% count$Year[i])] <- count$Species[i]
}
# Add absences (0)
for (i in 1:nrow(absent)){
m[which(rownames(m) %in% absent$transectID[i]), which(colnames(m) %in% absent$Year[i])] <- absent$count[i]
}
# Only to check: Count of individuals per year
count.year <- colSums(m,na.rm = TRUE)
# Count of individuals per year corrected by cluster size
average_clus <- mean(sp$Cluster) # TO INCLUDE IN THE MODEL
count.year_clus <- count.year*average_clus
# Year
yrs2 <- c(0, 1, 2, 3, 4, 5, 6, 7, 8) # To make it as a continuous variable, otherwise it doesnt work
year <- matrix(NA,nrow = max.sites, ncol = nyrs)
colnames(year) <- yrs
for (i in 1:nyrs){
year[ ,which(colnames(year) %in% yrs[i])] <- rep(yrs2[i], max.sites)
}
# Observer
# Format
obs <- matrix(NA, nrow = max.sites, ncol = nyrs)
rownames(obs) <- all.sites
colnames(obs) <- yrs
# Add observers for fields with counts > 0
for (i in 1:nrow(sp)){
obs[which(rownames(obs) %in% sp$transectID[i]), which(colnames(obs) %in% sp$Year[i])] <- sp$Observer[i]
}
# Add observers for fields with absences (0)
for (i in 1:nrow(absent)){
obs[which(rownames(obs) %in% absent$transectID[i]), which(colnames(obs) %in% absent$Year[i])] <- absent$Observer[i]
}
# Temperature
# Format
temp <- matrix(NA, nrow = max.sites, ncol = nyrs)
rownames(temp) <- all.sites
colnames(temp) <- yrs
# Add temper for fields with counts > 0
for (i in 1:nrow(sp)){
temp[which(rownames(temp) %in% sp$transectID[i]), which(colnames(temp) %in% sp$Year[i])] <- sp$Temp[i]
}
# Add temper for fields with absences (0)
for (i in 1:nrow(absent)){
temp[which(rownames(temp) %in% absent$transectID[i]), which(colnames(temp) %in% absent$Year[i])] <- absent$Temp[i]
}
# Wind
# Format
wind <- matrix(NA, nrow = max.sites, ncol = nyrs)
rownames(wind) <- all.sites
colnames(wind) <- yrs
# Add wind for fields with counts > 0
for (i in 1:nrow(sp)){
wind[which(rownames(wind) %in% sp$transectID[i]), which(colnames(wind) %in% sp$Year[i])] <- sp$Wind[i]
}
# Add wind for fields with absences (0)
for (i in 1:nrow(absent)){
wind[which(rownames(wind) %in% absent$transectID[i]), which(colnames(wind) %in% absent$Year[i])] <- absent$Wind[i]
}
# ---- Specify data in JAGS format ----
# Distance class and ind
nind <- nrow(sp)
dclass <- sp$Banda
m  # Counts per year and site
# Co-variates
zon <- as.vector(zone[,1])
yrs <- 1:9
year_number <- 0:8
# Matrix with observers
ob <- matrix(as.numeric(factor(obs)), nrow = max.sites, ncol = nyrs) # JAGS doesn't accept categorical variables
unique(factor(ob))
obs_id <- unique(factor(ob))[-1]
ob[which(is.na(ob))] <- sample(obs_id, length(which(is.na(ob))), replace = TRUE) # No NA in covariate
nobs <- length(unique(factor(ob)))
# Matrix with temperature (put random values where NA)
unique(factor(temp))
temp_id <- unique(factor(temp))[-1]
temp[which(is.na(temp))] <- sample(temp_id, length(which(is.na(temp))), replace = TRUE) # No NA in covariate
# Matrix with wind (put random values where NA)
unique(factor(wind))
wind_id <- unique(factor(wind))[-1]
wind[which(is.na(wind))] <- sample(wind_id, length(which(is.na(wind))), replace = TRUE) # No NA in covariate
# Index for random effects
site <- c(1:max.sites)
year <- c(1:nyrs)
sitesYears <- NULL
for (i in 1:nyrs){
sitesYears <- c(sitesYears,c(1:length(all.sites)))}
# Fixed index to map dclass onto site and year
# For the index, create a matrix m where NA are 0 (because I need the same length)
m_index <- m
m_index[which(is.na(m_index))] <- 0
site.dclass <- year.dclass <- NULL
for (t in 1:nyrs){ # sites has to be nested on years because dclass first indexes the sites on the same year
for (j in 1:max.sites){
site.dclass <- c(site.dclass, rep(j, m_index[j,t]))
year.dclass <- c(year.dclass, rep(t, m_index[j,t]))
} }
year_number
wind
temp
####
# ---- Compile data for JAGS model ----
data1 <- list(nyears = nyrs, nsites = max.sites, nG=nG, int.w=int.w, strip.width = strip.width, midpt = midpt, db = dist.breaks,
year.dclass = year.dclass, site.dclass = site.dclass, y = m, nind=nind, dclass=dclass,
tempCov = temp, windCov = wind, ob = ob, nobs = nobs, year1 = year_number, site = site, year_index = yrs)
#
setwd("S:/PhD/Second chapter/Data/Model")
cat("model{
# PRIORS
# PRIORS FOR LAMBDA
rho ~ dunif(-1,1) # Autorregresive parameter (serial AC)
tau <- pow(sd, -2) # Prior for overdispersion in eps
sd ~ dunif(0, 3)
bYear.lam ~ dnorm(0, 0.001) # Prior for the trend
# Random effects for lambda per site
mu.lam.site ~ dunif(-10, 10)
sig.lam.site ~ dunif(0, 10)
tau.lam.site <- 1/(sig.lam.site*sig.lam.site)
for (j in 1:nsites){
log.lambda.site[j] ~ dnorm(mu.lam.site, tau.lam.site)
}
# Random effects for lambda per year
sig.lam.year ~ dunif(0, 10)
tau.lam.year <- 1/(sig.lam.year*sig.lam.year)
log.lambda.year[1] <- 0
for (t in 2:nyears){
log.lambda.year[t] ~ dnorm(0, tau.lam.year)
}
# PRIORS FOR SIGMA
bTemp.sig ~ dnorm(0, 0.001)
bWind.sig ~ dnorm(0, 0.001)
mu.sig ~ dunif(-10, 10) # Random effects for sigma per observer
sig.sig ~ dunif(0, 10)
tau.sig <- 1/(sig.sig*sig.sig)
# Random observer effect for sigma
for (o in 1:nobs){
sig.obs[o] ~ dnorm(mu.sig, tau.sig)
}
# Random effects for sigma per year
sig.sig.year ~ dunif(0, 10)
tau.sig.year <- 1/(sig.sig.year*sig.sig.year)
for (t in 1:nyears){
log.sigma.year[t] ~ dnorm(0, tau.sig.year)
}
for(i in 1:nind){
dclass[i] ~ dcat(fct[site.dclass[i], year.dclass[i], 1:nG])
}
# LIKELIHOOD
# FIRST YEAR
for(j in 1:nsites){
sigma[j,1] <- exp(sig.obs[ob[j,1]] + bTemp.sig*tempCov[j,1] + bWind.sig*windCov[j,1] + log.sigma.year[year_index[1]])
# Construct cell probabilities for nG multinomial cells (distance categories) PER SITE
for(k in 1:nG){
up[j,1,k]<-pnorm(db[k+1], 0, 1/sigma[j,1]^2) ##db are distance bin limits
low[j,1,k]<-pnorm(db[k], 0, 1/sigma[j,1]^2)
p[j,1,k]<- 2 * (up[j,1,k] - low[j,1,k])
pi[j,1,k] <- int.w[k] / strip.width
f[j,1,k]<- p[j,1,k]/f.0[j,1]/int.w[k]                   ## detection prob. in distance category k
fc[j,1,k]<- f[j,1,k] * pi[j,1,k]                 ## pi=percent area of k; drops out if constant
fct[j,1,k]<-fc[j,1,k]/pcap[j,1]
}
pcap[j,1] <- sum(fc[j,1, 1:nG]) # Different per site and year (sum over all bins)
f.0[j,1] <- 2 * dnorm(0,0, 1/sigma[j,1]^2) # Prob density at 0
y[j,1] ~ dbin(pcap[j,1], N[j,1])
N[j,1] ~ dpois(lambda[j,1])
lambda[j,1] <- exp(log.lambda.site[site[j]] + log.lambda.year[year_index[1]] + bYear.lam*year1[1] + w[j,1]) # year1 is t-1; year_index is t (to index properly the random effect)
w[j,1] <- eps[j,1] / sqrt(1 - rho * rho)
eps[j,1] ~ dnorm(0, tau)
}
#############
# LATER YEARS
for(j in 1:nsites){
for (t in 2:nyears){
sigma[j,t] <- exp(sig.obs[ob[j,t]] + bTemp.sig*tempCov[j,t] + bWind.sig*windCov[j,t] + log.sigma.year[year_index[t]])
# Construct cell probabilities for nG multinomial cells (distance categories) PER SITE
for(k in 1:nG){
up[j,t,k]<-pnorm(db[k+1], 0, 1/sigma[j,t]^2) ##db are distance bin limits
low[j,t,k]<-pnorm(db[k], 0, 1/sigma[j,t]^2)
p[j,t,k]<- 2 * (up[j,t,k] - low[j,t,k])
pi[j,t,k] <- int.w[k] / strip.width
f[j,t,k]<- p[j,t,k]/f.0[j,t]/int.w[k]                   ## detection prob. in distance category k
fc[j,t,k]<- f[j,t,k] * pi[j,t,k]                 ## pi=percent area of k; drops out if constant
fct[j,t,k]<-fc[j,t,k]/pcap[j,t]
}
pcap[j,t] <- sum(fc[j,t, 1:nG]) # Different per site and year (sum over all bins)
f.0[j,t] <- 2 * dnorm(0,0, 1/sigma[j,t]^2) # Prob density at 0
y[j,t] ~ dbin(pcap[j,t], N[j,t])
N[j,t] ~ dpois(lambda[j,t])
lambda[j,t] <- exp(log.lambda.site[site[j]] + log.lambda.year[year_index[t]] + bYear.lam*year1[t] + w[j,t])
w[j,t] <- rho * w[j,t-1] + eps[j,t]
eps[j,t] ~ dnorm(0, tau)
}
}
# Derived parameters
for(t in 1:nyears){
popindex[t] <- sum(lambda[,t])
}
# Expected abundance per year inside model
lam.tot[1] <- popindex[1] # Expected abundance in year 1
for (i in 2:nyears){
lam.tot[i] <- lam.tot[i-1] * # Here I add the starting population size as a baseline for the trend
exp(bYear.lam)}
}",fill=TRUE, file = "s_sigma(integral)[obs(o,j,t)_covTemp(j,t)_covWind(j,t)_year.random(t)]_lambda[alpha.site.random(j)_year.random(t)_beta.year(j)_w].txt")
# Inits
Nst <- y.sum + 1
inits <- function(){list(mu.sig = runif(1, log(30), log(50)), sig.sig = runif(1), bzB.sig = runif(1),
mu.lam.site = runif(1), sig.lam.site = 0.2, sig.lam.year = 0.3, bYear.lam = runif(1),
N = Nst)}
# Params
params <- c( "mu.sig", "sig.sig", "bTemp.sig", "bWind.sig", "sig.obs", "log.sigma.year", # Save also observer effect
"mu.lam.site", "sig.lam.site", "sig.lam.year", "bYear.lam", "log.lambda.year", # Save year effect
"popindex", "sd", "rho", "lam.tot"
)
# MCMC settings
nc <- 3 ; ni <- 70000 ; nb <- 5000 ; nt <- 5
# With jagsUI
out <- jags(data1, inits, params, "s_sigma(integral)[obs(o,j,t)_covTemp(j,t)_covWind(j,t)_year.random(t)]_lambda[alpha.site.random(j)_year.random(t)_beta.year(j)_w].txt", n.chain = nc,
n.thin = nt, n.iter = ni, n.burnin = nb, parallel = TRUE)
# Inits
Nst <- m + 1
inits <- function(){list(mu.sig = runif(1, log(30), log(50)), sig.sig = runif(1), bzB.sig = runif(1),
mu.lam.site = runif(1), sig.lam.site = 0.2, sig.lam.year = 0.3, bYear.lam = runif(1),
N = Nst)}
# Params
params <- c( "mu.sig", "sig.sig", "bTemp.sig", "bWind.sig", "sig.obs", "log.sigma.year", # Save also observer effect
"mu.lam.site", "sig.lam.site", "sig.lam.year", "bYear.lam", "log.lambda.year", # Save year effect
"popindex", "sd", "rho", "lam.tot"
)
# MCMC settings
nc <- 3 ; ni <- 70000 ; nb <- 5000 ; nt <- 5
# With jagsUI
out <- jags(data1, inits, params, "s_sigma(integral)[obs(o,j,t)_covTemp(j,t)_covWind(j,t)_year.random(t)]_lambda[alpha.site.random(j)_year.random(t)_beta.year(j)_w].txt", n.chain = nc,
n.thin = nt, n.iter = ni, n.burnin = nb, parallel = TRUE)
print(out)
setwd("S:/PhD/Second chapter/Data/Results/TRIM/3autoreg_simple")
load("HDS_BUOED.RData")
summary <- as.data.frame(out$summary)
summary[which(summary$Rhat > 1.1), ]
# EFFECT CO-VARIATES IN SIGMA
par(mfrow = c(1,2))
title("STONE CURLEW", line = -3, cex = 2, outer = TRUE)
# Observer effect
plot(-21, xlim = c(1,15), ylim = c(3,6), ylab = "sigma", xlab = "Observer")
points(summary[grep("sig.obs", rownames(summary)), 1], pch = 16)
x <- c(1:15)
lci <- summary[grep("sig.obs", rownames(summary)), 3]
uci <- summary[grep("sig.obs", rownames(summary)), 7]
arrows(x,lci,x,uci, code=3, angle=90, length=0.04)
# Year effect
plot(-21, xlim = c(1,9), ylim = c(-1,1), ylab = "sigma", xlab = "Year")
points(summary[grep("log.sigma.year", rownames(summary)), 1], pch = 16)
x <- c(1:9)
lci <- summary[grep("log.sigma.year", rownames(summary)), 3]
uci <- summary[grep("log.sigma.year", rownames(summary)), 7]
arrows(x,lci,x,uci, code=3, angle=90, length=0.04)
title("STONE CURLEW", line = -3, cex = 2, outer = TRUE)
setwd("S:/PhD/Second chapter/Data")
d <- read.csv("DataDS_ready_ALL.csv")
colnames(d)[which(colnames(d) == "Count")] <- "Cluster"
unique(d$Species)
# Load species names
s <- read.csv("sp_trend_dg.csv", sep = ";")
unique(s$Species)
s[which(s$Species == "STTUR"), ]
s_good <- as.vector(s$Species[which(s$include_samplesize == 1)])
problems <- c("CIJUN", "COCOT", "OEHIS", "TUMER", "TUVIS", "STUNI", "STVUL", "COLIV", "ORIORI", "LUARB", "LUMEG")
s_good <- s_good[-which(s_good %in% problems)]
s_good
