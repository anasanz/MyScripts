y.sum.sites <- list()
for (t in 1:nyrs){
for(s in 1:nSpecies){
y.sum.sysp[[s]] <- rowSums(yList[[t]][,,s]) # List with counts per site in a given year t. Each element is one species
}
y.sum.sites[[t]] <- y.sum.sysp # Stored by years (y.sum.sites[[t]][[s]]): 8 elements with 15 subelements each
}
# Check things in loop because I dont want to do a 3diiimensional mistake
rowSums(yList[[2]][,,2])
h <- yList[[2]]
class(h)
rowSums(h[,,1])
# Arrange it by species (so that each element of the list is a species)
y.sum.sites.sp <- list()
for (s in 1:nSpecies){
y.sum.sites.sp[[s]] <- sapply(y.sum.sites, function(x) x[s]) }
# From here I do the same than in script 8.1 but applied to the list of lists
y.sum <- list()
for (s in 1:nSpecies){
store <- unlist(y.sum.sites.sp[s], recursive = F) # Convert it into single list to use ldply later
y.sum.sites2 <- ldply(store,rbind) # Put all together (in rows)
y.sum[[s]] <- t(y.sum.sites2)}
# y.sum is a list of species counts.
# Contains y per site and year stored in a matrix with columns.
#############################################
# ---- Convert data to JAGS format ----
nind.sp <- list()
for (s in 1:nSpecies){
nind.year.sp <- lapply(y.sum.sites.sp[[s]],sum)
nind.sp[[s]] <- sum(unlist(nind.year.sp, use.names = F)) # Just to know, but jags only wants the sum
}
nind <- do.call(sum, nind.sp)
# Get one long matrix with counts and sites per species (columns)
yLong.sp <- matrix(NA, nrow = total.sites, ncol = nSpecies)
for (s in 1:nSpecies){
yLong.na <- unlist(as.data.frame(y.sum[[s]]), use.names = F) # With NA included (useful if I ever make a model estimating abundance in sites with no information)
yLong.sp[,s] <- yLong.na[complete.cases(yLong.na)]
}
#sitesYears.sp <- matrix(NA, nrow = total.sites, ncol = nSpecies)
#sitesYears <- NULL
#for (s in 1:nSpecies){
#  for (i in 1:nyrs){
#    sitesYears <- c(sitesYears,c(1:nSites[i]))}
#sitesYears.sp[,s] <- sitesYears
#sitesYears <- NULL # Set the vector empty to use it again
#  }
# All this index and variables are site-speficic (not species specific) so they stay like this
sitesYears <- NULL # I did that loop but the normal version actually works, since is an index per site-year
for (i in 1:nyrs){
sitesYears <- c(sitesYears,c(1:nSites[i]))
}
# Create one long vector with covariate values
a1.m <- matrix(area1_sc, nrow = max.sites, ncol = nyrs, byrow = F) # I need to make it from the same matrix
a2.m <- matrix(area2_sc, nrow = max.sites, ncol = nyrs, byrow = F)# from which I created lambda, to make it fit!
area1 <- NULL
for (i in 1:nyrs){
area1 <- c(area1,a1.m[1:nSites[i],i])
}
area2 <- NULL
for (i in 1:nyrs){
area2 <- c(area2,a2.m[1:nSites[i],i])
}
zB <- as.vector(zone[,2])
zoneB <- NULL
for (i in 1:nyrs){
zoneB <- c(zoneB,zB[1:nSites[i]])
}
ob <- NULL
for (i in 1:nyrs){
ob <- c(ob,ob.id[1:nSites[i], i])
}
# Get one long vector with years, distance category and site
site <- dclass <- year <- NULL
for (s in 1:nSpecies){
for (t in 1:nyrs){
for(j in 1:max.sites){
if (y.sum[[s]][j,t] == 0 | is.na(y.sum[[s]][j,t]))
next
site <- c(site, rep(j, y.sum[[s]][j,t])) # site index: repeat the site as many times as counts in that site (for multi model??)
# vector of sites through years (disregarding distance class)
year <- c(year, rep(t, y.sum[[s]][j,t]))
for (k in 1:nG){
if (yList[[t]][j,k,s] == 0) # Refers for the ditance classes to the list with years and bins
next
dclass <- c(dclass, rep(k, yList[[t]][j,k,s]))}	# Distance category index
}}}
# Get one long vector for each site-year combination of each dclass observation
# (so, at which j, or siteyear is every observation or dclass corresponding?)
n.allSiteYear <- sum(nSites)
siteYear.dclass <- NULL
###RS: Fixed index to map dclass onto site-year combinations (all species together)
for (s in 1:nSpecies){
for (i in 1:n.allSiteYear){
siteYear.dclass <- c(siteYear.dclass,rep(i, yLong.sp[i,s]))}
}
# Fixed index to map dclass in species (so that it matches with the dimensions (s,j,K))
sp.dclass <- NULL
for (s in 1:nSpecies){
for (i in 1:n.allSiteYear){
sp.dclass <- c(sp.dclass,rep(s, yLong.sp[i,s]))}
}
# Create one matrix for indexing year when calculating abundance per year in JAGS (works for all species)
allyears <- NULL
for (i in 1:nyrs){
allyears <- c(allyears,rep(yrs[i],nSites[i]))
}
m <- data.frame(allyears = allyears)
m$allyears <- as.factor(m$allyears)
indexYears <- model.matrix(~ allyears-1, data = m)
# ---- Compile data for JAGS model ----
data1 <- list(nyears = nyrs, max.sites = max.sites, nG=nG, siteYear.dclass = siteYear.dclass, int.w=int.w, strip.width = strip.width, midpt = midpt,
y = yLong.sp, n.allSiteYear = n.allSiteYear, nind=nind, dclass=dclass, sitesYears = sitesYears, indexYears = indexYears, allyears = allyears,
area1 = area1, area2 = area2, zoneB = zoneB, ob = ob, nobs = nobs, db = dist.breaks,
nSpecies = nSpecies, sp.dclass = sp.dclass, nyrs = nyrs)
# ---- JAGS model ----
setwd("C:/Users/ana.sanz/Documents/PhD_20_sept/Second chapter/Data/Model")
cat("model{
# PRIORS
# SPECIES SPECIFIC PARAMETERS (random effects)
for (s in 1:nSpecies){              # Random intercept for sigma (dif detection per species)
asig[s] ~ dnorm(mu_s, tau_s)}
for (s in 1:nSpecies){              # Random beta per species (dif shape of detection curve per species)
beta[s] ~ dnorm(mu_b, tau_b)}
for(s in 1:nSpecies){              # Random intercept for lambda (dif abundance per species and year)
for(t in 1:nyrs){
alam[s,t] ~ dnorm(mu_l,tau_l)}}
for (s in 1:nSpecies){             # Random effect for lambda (dif abundance per species and site)
for (i in 1:max.sites){
spsite[s,i] ~ dnorm(0, tau_spsite) }}
# Hyperparameters of species level random effects
mu_s ~ dnorm(0,0.01) # Hyperparameters for sigma intercept
tau_s <- 1/(sig_s*sig_s)
sig_s ~ dunif(0,500)
mu_b ~ dnorm(0,0.01) # Hyperparameters for beta
tau_b <- 1/(sig_b*sig_b)
sig_b ~ dunif(0,500)
mu_l ~ dnorm(0,0.01) # Hyperparameters for lambda intercept
tau_l <- 1/(sig_l*sig_l)
sig_l ~ dunif(0,500)
tau_spsite <- 1/(sig_spsite*sig_spsite) # Hyperparameter for site random effect in lambda
sig_spsite ~ dunif(0,500)
# PRIORS FOR LAMBDA
bzB.lam ~ dnorm(0, 0.001)
ba1.lam ~ dnorm(0, 0.001)
ba2.lam ~  dnorm(0, 0.001)
# PRIORS FOR SIGMA
bzB.sig ~ dnorm(0, 0.001)
sig.sig.ob ~ dunif(0, 10) # Random effects for sigma per observer
tau.sig.ob <- 1/(sig.sig.ob*sig.sig.ob)
#Random observer effect for sigma
for (o in 1:nobs){
sig.obs[o] ~ dnorm(0, tau.sig.ob)
}
for(i in 1:nind){
dclass[i] ~ dcat(fct[sp.dclass[i],siteYear.dclass[i], 1:nG])
}
for (s in 1:nSpecies){
for(j in 1:n.allSiteYear){
sigma[s,j] <- exp(asig[s] + sig.obs[ob[j]] + bzB.sig*zoneB[j])
# Construct cell probabilities for nG multinomial cells (distance categories) PER SITE
for(k in 1:nG){
p[s,j,k]<-1-exp(-(midpt[k]/sigma[s,j])^-beta[s])
pi[s,j,k] <- int.w[k] / strip.width
fc[s,j,k]<- p[s,j,k] * pi[s,j,k]                 ## pi=percent area of k; drops out if constant
fct[s,j,k]<-fc[s,j,k]/pcap[s,j]
}
pcap[s,j] <- sum(fc[s,j,1:nG]) # Different per site and year (sum over all bins)
y[j,s] ~ dbin(pcap[s,j], N[j,s])
N[j,s] ~ dpois(lambda[j,s])
lambda[j,s] <- exp(alam[s,allyears[j]] + spsite[s,sitesYears[j]] + bzB.lam*zoneB[j]
+ ba1.lam*area1[j] + ba2.lam*area2[j])
} }
# Derived parameters
#for (i in 1:nyears){
#Ntotal[i] <- sum(N[s]*indexYears[,i])
#}
for (s in 1:nSpecies){
for (i in 1:nyears){
Ntotal[i,s] <- sum(N[,s]*indexYears[,i]) }}
}", fill=TRUE,
file = "s_HRdetect_beta(s)_sigma[alpha(s)_obs(j,t)_covZone(j)]_lambda[alpha(s,t)_spsite(s,j)_covZone(j)_covArea(j,t)].txt")
# Inits
Nst <- yLong.sp + 1
inits <- function(){list(mu_l = runif(1), sig_l = 0.2, sig_spsite = runif(1),
N=Nst,
bzB.lam = runif(1), ba1.lam = runif(1), ba2.lam = runif(1),
sig.sig.ob = runif(1), bzB.sig = runif(1),
mu_s = runif(1, log(30), log(50)) , sig_s = runif(1),
mu_b = runif(1) , sig_b = runif(1))}
# Params
params <- c("Ntotal", #"N", "sigma", "lambda", I remove it so that it doesnt save the lambdas and takes shorter. It still calculates them
"mu_l", "sig_l", "sig_spsite",
"bzB.lam", "ba1.lam", "ba2.lam",
"sig.sig.ob", "bzB.sig",
"mu_s", "sig_s", "mu_b", "sig_b"
)
# MCMC settings
nc <- 3 ; ni <- 5000 ; nb <- 2000 ; nt <- 2
# With jagsUI
out <- jags(data1, inits, params, "s_HRdetect_beta(s)_sigma[alpha(s)_obs(j,t)_covZone(j)]_lambda[alpha(s,t)_spsite(s,j)_covZone(j)_covArea(j,t)].txt", n.chain = nc,
n.thin = nt, n.iter = ni, n.burnin = nb, parallel = TRUE)
print(out)
summary <- as.data.frame(as.matrix(out$summary))
print(out)
summary <- as.data.frame(as.matrix(out$summary))
# To compare:
data_comp <- list(N.tot = N.tot, b.a1 = b.a1, b.a2 = b.a2, b.lam.zoneB = b.lam.zoneB,
mu.lam.alpha.spyear = mu.lam.alpha.spyear,
sig.lam.alpha.spyear = sig.lam.alpha.spyear,
sig.lam.spsite = sig.lam.spsite,
b.sig.zoneB = b.sig.zoneB,
sig.sig.obs = sig.sig.obs,
mu.sig.sp = mu.sig.sp,
sig.sig.sp = sig.sig.sp,
mu.b = mu.b,
sig.b = sig.b
)
View(summary)
data_comp
setwd("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/Data")
library(rgdal)
setwd("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/Data")
d <- read.csv("DataDS_ch3_20_18_final.csv") # Load all observations all species
rm(list=ls())
library(dplyr)
library(tidyr)
setwd("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/Data")
dat <- read.csv("DataDS_ch3_allsp.csv", sep = ",")
setwd("C:/Users/ana.sanz/Documents/PhD_20_sept/Second chapter/Data")
all <- read.csv("index_selec_communities_FSP_DG_GB.csv", sep = ";")
mig <- all[which(all$NO.FS.DG.GB == 1),]
sp_mig <- as.character(unique(mig$Species)) #Vector with species to delete
dat <- dat[-which(dat$Species %in% sp_mig), ]
#### Remove very scarce (less than 20 detections in total, which is the lower threshold to include PTORI) ####
setwd("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/Data")
dat_info <- read.csv("infospecies_ch3_final.csv", sep = ";")
scarce <- dat_info[which(dat_info$remove_veryscarce == 1), ]
sp_scarce <- as.character(unique(scarce$Species)) #Vector with species to delete
dat <- dat[-which(dat$Species %in% sp_scarce), ]
# JOIN SPECIES FROM STURNUS (STVUL + STUNI = STSSP)
dat[which(dat$Species == "STSSP"), ]
dat$Species[which(dat$Species == "STVUL")] <- "STSSP"
dat$Species[which(dat$Species == "STUNI")] <- "STSSP"
# REMOVE GASSP BECAUSE GATHE AND GACRI HAVE A LOT OF OBSERVATIONS
dat <- dat[-which(dat$Species == "GASSP"), ]
dc <- dat_info[which(dat_info$remove_detectioncurve == 1), ]
sp_dc <- as.character(unique(dc$Species)) #Vector with species to delete
dat <- dat[-which(dat$Species %in% sp_dc), ]
#### Remove species with no biological meaning related to the study question ####
bio <- dat_info[which(dat_info$remove_biologicalsense == 1), ]
sp_bio <- as.character(unique(bio$Species)) #Vector with species to delete
dat <- dat[-which(dat$Species %in% sp_bio), ]
dat$Species2 <- dat$Species
dat$Species2 <- as.character(dat$Species2)
dat$Species2[which(dat$Species2 == "TERAX" & dat$Sex == 0)] <- "TERAX_ind"
dat$Species2[which(dat$Species2 == "TERAX" & dat$Sex == 1)] <- "TERAX_M"
dat$Species2[which(dat$Species2 == "TERAX" & dat$Sex == 2)] <- "TERAX_F"
setwd("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/Data")
write.csv(dat,"DataDS_ch3_20_18_final.csv")
setwd("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/Data")
rm(list=ls())
rm(list=ls())
library(rgdal)
setwd("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/Data")
d <- read.csv("DataDS_ch3_20_18_final.csv") # Load all observations all species
View(d)
transects_obs <- unique(d$transectID)
setwd("C:/Users/ana.sanz/Documents/PhD_20_sept/Second chapter/Data/GIS")
t <- readOGR(dsn = "C:/Users/ana.sanz/Documents/PhD_20_sept/Second chapter/Data/GIS", layer = "Trans_2018_EPSG23031") # Load GIS layer
transects_obs_layer <- t[which(t@data$Codi %in% transects_obs), ]
View(transects_obs_layer)
transects_obs
rm(list=ls())
library(rgdal)
setwd("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/Data")
d <- read.csv("DataDS_ch3_20_18_final.csv") # Load all observations all species
transects_obs <- unique(d$transectID)
setwd("C:/Users/ana.sanz/Documents/PhD_20_sept/Second chapter/Data/GIS")
t <- readOGR(dsn = "C:/Users/ana.sanz/Documents/PhD_20_sept/Second chapter/Data/GIS", layer = "Trans_2018_EPSG23031") # Load GIS layer
transects_obs_layer <- t[which(t@data$Codi %in% transects_obs), ]
writeOGR(transects_obs_layer, dsn = "C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS",layer = "Trans_2010_2018_ch3_EPSG23031", driver ="ESRI Shapefile")
trans <- transects_obs_layer@data
View(trans)
setwd("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS")
dun15 <- readOGR(dsn = "C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/Data/GIS", layer = "DUN15_clip_EPSG23031") # Load GIS layer
dun15 <- readOGR(dsn = "C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS", layer = "DUN15_clip_EPSG23031") # Load GIS layer
rm(list=ls())
library(rgdal)
library(rgeos)
#### Create buffers DUN to see how to classify crops for crop diversification ####
# Load transects
setwd("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS")
t <- readOGR(dsn = "C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS", layer = "Trans_2010_2018_ch3_EPSG23031") # Load GIS layer
# Buffer 500 m
t_buf <- gBuffer( t, width=500, byid=TRUE )
plot(t_buf)
rm(list=ls())
library(rgdal)
library(rgeos)
#### Create buffers DUN to see how to classify crops for crop diversification ####
# Load transects
setwd("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS")
t <- readOGR(dsn = "C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS", layer = "Trans_2010_2018_ch3_EPSG23031") # Load GIS layer
# Buffer 500 m
t_buf <- gBuffer( t, width=500, byid=TRUE )
plot(t_buf)
# Load DUN
setwd("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS")
dun15 <- readOGR(dsn = "C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS", layer = "DUN15_clip_EPSG23031")
dun16 <- readOGR(dsn = "C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS", layer = "DUN16_clip_EPSG23031")
dun17 <- readOGR(dsn = "C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS", layer = "DUN17_clip_EPSG23031")
dun18 <- readOGR(dsn = "C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS", layer = "DUN18_clip_EPSG23031")
dun15_crop <- crop(dun15, extent(t_buf), snap="out")
dun16_crop <- crop(dun16, extent(t_buf), snap="out")
dun17_crop <- crop(dun17, extent(t_buf), snap="out")
dun18_crop <- crop(dun18, extent(t_buf), snap="out")
library(rgdal)
library(rgeos)
dun15_crop <- crop(dun15, extent(t_buf), snap="out")
library(raster)
dun15_crop <- crop(dun15, extent(t_buf), snap="out")
dun16_crop <- crop(dun16, extent(t_buf), snap="out")
dun17_crop <- crop(dun17, extent(t_buf), snap="out")
dun18_crop <- crop(dun18, extent(t_buf), snap="out")
plot(dun16_crop)
"
rm(list=ls())
library(rgdal)
library(rgeos)
library(raster)
setwd("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Buffers_cropdiver_classification")
dun15 <- readOGR(dsn = "C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Buffers_cropdiver_classification", layer = "dun15_crop")
dun16 <- readOGR(dsn = "C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Buffers_cropdiver_classification", layer = "dun16_crop")
dun17 <- readOGR(dsn = "C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Buffers_cropdiver_classification", layer = "dun17_crop")
# Ordenar cultivos en tabla
plot(dun15)
# Ordenar cultivos en tabla
head(dun15@data)
unique(dun15@data$Cultiu)
cul15 <- as.data.frame(unique(dun15@data$Cultiu))
View(cul15)
colnames(cul15)[1] <- "Cult"
View(cul15)
cul16 <- as.data.frame(unique(dun16@data$Cultiu))
colnames(cul16)[1] <- "Cult"
View(cul16)
cul17 <- as.data.frame(unique(dun17@data$Cultiu))
colnames(cul17)[1] <- "Cult"
cul18 <- as.data.frame(unique(dun18@data$Cultiu))
colnames(cul18)[1] <- "Cult"
View(cul18)
library(dplyr)
c <- full_join(cul15,cul16,cul17,cul18)
c <- full_join(cul15,cul16,cul17,cul18, by = "Cult")
c <- full_join(cul15,cul16, by = "Cult")
View(c)
cul15 <- as.data.frame(unique(dun15@data$Cultiu))
colnames(cul15)[1] <- "Cult"
cul15$year <- "2015"
cul16 <- as.data.frame(unique(dun16@data$Cultiu))
colnames(cul16)[1] <- "Cult"
cul16$year <- "2016"
c <- full_join(cul15,cul16, by = "Cult")
View(c)
cul17 <- as.data.frame(unique(dun17@data$Cultiu))
colnames(cul17)[1] <- "Cult"
cul17$year <- "2017"
cul18 <- as.data.frame(unique(dun18@data$Cultiu))
colnames(cul18)[1] <- "Cult"
cul18$year <- "2018"
c2 <- full_join(c,cul17, by = "Cult")
c3 <- full_join(c,cul18, by = "Cult")
View(c)
View(c3)
unique(dun15@data$Grup)
cul15_1 <- left_join(cul15, dun15@data$Grup)
# Ordenar cultivos en tabla
head(dun15@data)
cul15_cult_grup <- dun15@data[,c(6,7)]
xtabs(~ Cultiu + Grup, dun15@data)
cul15_cult_grup <- dun15@data[,c(6,7)]
cul15 <- as.data.frame(unique(dun15@data$Cultiu))
colnames(cul15)[1] <- "Cult"
cul15$year <- "2015"
cul15_cult_grup <- dun15@data[,c(6,7)]
cul15_1 <- left_join(cul15, cul15_cult_grup, by = "Cult")
cul15_cult_grup
cul15 <- as.data.frame(unique(dun15@data$Cultiu))
colnames(cul15)[1] <- "Cultiu"
cul15$year <- "2015"
cul15_cult_grup <- dun15@data[,c(6,7)]
cul15_1 <- left_join(cul15, cul15_cult_grup, by = "Cultiu")
cul15_1
cul15
cul15_cult_grup <- dun15@data[,c(6,7)]
cul15_1 <- inner_join(cul15, cul15_cult_grup, by = "Cultiu")
cul15_1
cul15_cult_grup
cul15_cult_grup <- cul15_cult_grup[-which(duplicated(cul15_cult_grup)), ]
View(cul15_cult_grup)
cul15_1 <- inner_join(cul15, cul15_cult_grup, by = "Cultiu")
cul15_1
cul15 <- as.data.frame(unique(dun15@data$Cultiu))
colnames(cul15)[1] <- "Cultiu"
cul15_cult_grup <- dun15@data[,c(6,7)]
cul15_cult_grup <- cul15_cult_grup[-which(duplicated(cul15_cult_grup)), ]
cul15_1 <- inner_join(cul15, cul15_cult_grup, by = "Cultiu")
cul15$year <- "2015"
View(cul15)
cul15 <- as.data.frame(unique(dun15@data$Cultiu))
colnames(cul15)[1] <- "Cultiu"
cul15_cult_grup <- dun15@data[,c(6,7)]
cul15_cult_grup <- cul15_cult_grup[-which(duplicated(cul15_cult_grup)), ]
cul15 <- inner_join(cul15, cul15_cult_grup, by = "Cultiu")
cul15$year <- "2015"
cul16 <- as.data.frame(unique(dun16@data$Cultiu))
colnames(cul16)[1] <- "Cultiu"
cul16_cult_grup <- dun16@data[,c(6,7)]
cul16_cult_grup <- cul16_cult_grup[-which(duplicated(cul16_cult_grup)), ]
cul16 <- inner_join(cul16, cul16_cult_grup, by = "Cultiu")
cul16$year <- "2016"
c <- full_join(cul15,cul16, by = "Cultiu", "Grup")
c
c2 <- full_join(c,cul17, by = "Cult", "Grup")
c2 <- full_join(c,cul17, by = "Cultiu", "Grup")
cul15 <- as.data.frame(unique(dun15@data$Cultiu))
colnames(cul15)[1] <- "Cultiu"
cul15_cult_grup <- dun15@data[,c(6,7)]
cul15_cult_grup <- cul15_cult_grup[-which(duplicated(cul15_cult_grup)), ]
cul15 <- inner_join(cul15, cul15_cult_grup, by = "Cultiu")
cul15$year <- "2015"
cul16 <- as.data.frame(unique(dun16@data$Cultiu))
colnames(cul16)[1] <- "Cultiu"
cul16_cult_grup <- dun16@data[,c(6,7)]
cul16_cult_grup <- cul16_cult_grup[-which(duplicated(cul16_cult_grup)), ]
cul16 <- inner_join(cul16, cul16_cult_grup, by = "Cultiu")
cul16$year <- "2016"
cul17 <- as.data.frame(unique(dun17@data$Cultiu))
colnames(cul17)[1] <- "Cultiu"
cul17_cult_grup <- dun17@data[,c(6,7)]
cul17_cult_grup <- cul17_cult_grup[-which(duplicated(cul17_cult_grup)), ]
cul17 <- inner_join(cul17, cul17_cult_grup, by = "Cultiu")
cul17$year <- "2017"
cul18 <- as.data.frame(unique(dun18@data$Cultiu))
colnames(cul18)[1] <- "Cultiu"
cul18_cult_grup <- dun18@data[,c(6,7)]
cul18_cult_grup <- cul18_cult_grup[-which(duplicated(cul18_cult_grup)), ]
cul18 <- inner_join(cul18, cul18_cult_grup, by = "Cultiu")
cul18$year <- "2018"
c <- full_join(cul15,cul16, by = "Cultiu", "Grup")
c2 <- full_join(c,cul17, by = "Cultiu", "Grup")
c3 <- full_join(c,cul18, by = "Cultiu", "Grup")
View(c3)
write.csv(c3, "clasificacion_cultivos_div.csv")
setwd("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/Data")
write.csv(c3, "clasificacion_cultivos_div.csv")
View(c3)
c3 <- full_join(c2,cul18, by = "Cultiu", "Grup")
write.csv(c3, "clasificacion_cultivos_div.csv")
rm(list=ls())
library(rgdal)
library(rgeos)
library(raster)
library(dplyr)
#### Create buffers DUN to see how to classify crops for crop diversification ####
# Buffers created in Arcgis and cropped with each of the dun layers
setwd("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Buffers_cropdiver_classification")
dun15 <- readOGR(dsn = "C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Buffers_cropdiver_classification", layer = "dun15_crop")
dun16 <- readOGR(dsn = "C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Buffers_cropdiver_classification", layer = "dun16_crop")
dun17 <- readOGR(dsn = "C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Buffers_cropdiver_classification", layer = "dun17_crop")
dun18 <- readOGR(dsn = "C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Buffers_cropdiver_classification", layer = "dun18_crop")
dun19 <- readOGR(dsn = "C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Buffers_cropdiver_classification", layer = "dun19_crop")
# Ordenar cultivos en tabla
head(dun15@data)
cul15 <- as.data.frame(unique(dun15@data$Cultiu))
colnames(cul15)[1] <- "Cultiu"
cul15_cult_grup <- dun15@data[,c(6,7)]
cul15_cult_grup <- cul15_cult_grup[-which(duplicated(cul15_cult_grup)), ]
cul15 <- inner_join(cul15, cul15_cult_grup, by = "Cultiu")
cul15$year <- "2015"
cul16 <- as.data.frame(unique(dun16@data$Cultiu))
colnames(cul16)[1] <- "Cultiu"
cul16_cult_grup <- dun16@data[,c(6,7)]
cul16_cult_grup <- cul16_cult_grup[-which(duplicated(cul16_cult_grup)), ]
cul16 <- inner_join(cul16, cul16_cult_grup, by = "Cultiu")
cul16$year <- "2016"
cul17 <- as.data.frame(unique(dun17@data$Cultiu))
colnames(cul17)[1] <- "Cultiu"
cul17_cult_grup <- dun17@data[,c(6,7)]
cul17_cult_grup <- cul17_cult_grup[-which(duplicated(cul17_cult_grup)), ]
cul17 <- inner_join(cul17, cul17_cult_grup, by = "Cultiu")
cul17$year <- "2017"
cul18 <- as.data.frame(unique(dun18@data$Cultiu))
colnames(cul18)[1] <- "Cultiu"
cul18_cult_grup <- dun18@data[,c(6,7)]
cul18_cult_grup <- cul18_cult_grup[-which(duplicated(cul18_cult_grup)), ]
cul18 <- inner_join(cul18, cul18_cult_grup, by = "Cultiu")
cul18$year <- "2018"
cul19 <- as.data.frame(unique(dun19@data$Cultiu))
colnames(cul19)[1] <- "Cultiu"
cul19_cult_grup <- dun19@data[,c(6,7)]
cul19_cult_grup <- cul19_cult_grup[-which(duplicated(cul19_cult_grup)), ]
cul19 <- inner_join(cul19, cul19_cult_grup, by = "Cultiu")
cul19$year <- "2019"
c <- full_join(cul15,cul16, by = "Cultiu", "Grup")
c2 <- full_join(c,cul17, by = "Cultiu", "Grup")
c3 <- full_join(c2,cul18, by = "Cultiu", "Grup")
c4 <- full_join(c3,cul19, by = "Cultiu", "Grup")
setwd("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/Data")
write.csv(c4, "clasificacion_cultivos_div.csv")
unique(dun19@data$Cultiu)
unique(dun19@data$Cultiu)
