colnames(cul16)[1] <- "Cult"
View(cul16)
cul17 <- as.data.frame(unique(dun17@data$Cultiu))
colnames(cul17)[1] <- "Cult"
cul18 <- as.data.frame(unique(dun18@data$Cultiu))
colnames(cul18)[1] <- "Cult"
View(cul18)
library(dplyr)
c <- full_join(cul15,cul16,cul17,cul18)
c <- full_join(cul15,cul16,cul17,cul18, by = "Cult")
c <- full_join(cul15,cul16, by = "Cult")
View(c)
cul15 <- as.data.frame(unique(dun15@data$Cultiu))
colnames(cul15)[1] <- "Cult"
cul15$year <- "2015"
cul16 <- as.data.frame(unique(dun16@data$Cultiu))
colnames(cul16)[1] <- "Cult"
cul16$year <- "2016"
c <- full_join(cul15,cul16, by = "Cult")
View(c)
cul17 <- as.data.frame(unique(dun17@data$Cultiu))
colnames(cul17)[1] <- "Cult"
cul17$year <- "2017"
cul18 <- as.data.frame(unique(dun18@data$Cultiu))
colnames(cul18)[1] <- "Cult"
cul18$year <- "2018"
c2 <- full_join(c,cul17, by = "Cult")
c3 <- full_join(c,cul18, by = "Cult")
View(c)
View(c3)
unique(dun15@data$Grup)
cul15_1 <- left_join(cul15, dun15@data$Grup)
# Ordenar cultivos en tabla
head(dun15@data)
cul15_cult_grup <- dun15@data[,c(6,7)]
xtabs(~ Cultiu + Grup, dun15@data)
cul15_cult_grup <- dun15@data[,c(6,7)]
cul15 <- as.data.frame(unique(dun15@data$Cultiu))
colnames(cul15)[1] <- "Cult"
cul15$year <- "2015"
cul15_cult_grup <- dun15@data[,c(6,7)]
cul15_1 <- left_join(cul15, cul15_cult_grup, by = "Cult")
cul15_cult_grup
cul15 <- as.data.frame(unique(dun15@data$Cultiu))
colnames(cul15)[1] <- "Cultiu"
cul15$year <- "2015"
cul15_cult_grup <- dun15@data[,c(6,7)]
cul15_1 <- left_join(cul15, cul15_cult_grup, by = "Cultiu")
cul15_1
cul15
cul15_cult_grup <- dun15@data[,c(6,7)]
cul15_1 <- inner_join(cul15, cul15_cult_grup, by = "Cultiu")
cul15_1
cul15_cult_grup
cul15_cult_grup <- cul15_cult_grup[-which(duplicated(cul15_cult_grup)), ]
View(cul15_cult_grup)
cul15_1 <- inner_join(cul15, cul15_cult_grup, by = "Cultiu")
cul15_1
cul15 <- as.data.frame(unique(dun15@data$Cultiu))
colnames(cul15)[1] <- "Cultiu"
cul15_cult_grup <- dun15@data[,c(6,7)]
cul15_cult_grup <- cul15_cult_grup[-which(duplicated(cul15_cult_grup)), ]
cul15_1 <- inner_join(cul15, cul15_cult_grup, by = "Cultiu")
cul15$year <- "2015"
View(cul15)
cul15 <- as.data.frame(unique(dun15@data$Cultiu))
colnames(cul15)[1] <- "Cultiu"
cul15_cult_grup <- dun15@data[,c(6,7)]
cul15_cult_grup <- cul15_cult_grup[-which(duplicated(cul15_cult_grup)), ]
cul15 <- inner_join(cul15, cul15_cult_grup, by = "Cultiu")
cul15$year <- "2015"
cul16 <- as.data.frame(unique(dun16@data$Cultiu))
colnames(cul16)[1] <- "Cultiu"
cul16_cult_grup <- dun16@data[,c(6,7)]
cul16_cult_grup <- cul16_cult_grup[-which(duplicated(cul16_cult_grup)), ]
cul16 <- inner_join(cul16, cul16_cult_grup, by = "Cultiu")
cul16$year <- "2016"
c <- full_join(cul15,cul16, by = "Cultiu", "Grup")
c
c2 <- full_join(c,cul17, by = "Cult", "Grup")
c2 <- full_join(c,cul17, by = "Cultiu", "Grup")
cul15 <- as.data.frame(unique(dun15@data$Cultiu))
colnames(cul15)[1] <- "Cultiu"
cul15_cult_grup <- dun15@data[,c(6,7)]
cul15_cult_grup <- cul15_cult_grup[-which(duplicated(cul15_cult_grup)), ]
cul15 <- inner_join(cul15, cul15_cult_grup, by = "Cultiu")
cul15$year <- "2015"
cul16 <- as.data.frame(unique(dun16@data$Cultiu))
colnames(cul16)[1] <- "Cultiu"
cul16_cult_grup <- dun16@data[,c(6,7)]
cul16_cult_grup <- cul16_cult_grup[-which(duplicated(cul16_cult_grup)), ]
cul16 <- inner_join(cul16, cul16_cult_grup, by = "Cultiu")
cul16$year <- "2016"
cul17 <- as.data.frame(unique(dun17@data$Cultiu))
colnames(cul17)[1] <- "Cultiu"
cul17_cult_grup <- dun17@data[,c(6,7)]
cul17_cult_grup <- cul17_cult_grup[-which(duplicated(cul17_cult_grup)), ]
cul17 <- inner_join(cul17, cul17_cult_grup, by = "Cultiu")
cul17$year <- "2017"
cul18 <- as.data.frame(unique(dun18@data$Cultiu))
colnames(cul18)[1] <- "Cultiu"
cul18_cult_grup <- dun18@data[,c(6,7)]
cul18_cult_grup <- cul18_cult_grup[-which(duplicated(cul18_cult_grup)), ]
cul18 <- inner_join(cul18, cul18_cult_grup, by = "Cultiu")
cul18$year <- "2018"
c <- full_join(cul15,cul16, by = "Cultiu", "Grup")
c2 <- full_join(c,cul17, by = "Cultiu", "Grup")
c3 <- full_join(c,cul18, by = "Cultiu", "Grup")
View(c3)
write.csv(c3, "clasificacion_cultivos_div.csv")
setwd("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/Data")
write.csv(c3, "clasificacion_cultivos_div.csv")
View(c3)
c3 <- full_join(c2,cul18, by = "Cultiu", "Grup")
write.csv(c3, "clasificacion_cultivos_div.csv")
rm(list=ls())
library(rgdal)
library(rgeos)
library(raster)
library(dplyr)
#### Create buffers DUN to see how to classify crops for crop diversification ####
# Buffers created in Arcgis and cropped with each of the dun layers
setwd("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Buffers_cropdiver_classification")
dun15 <- readOGR(dsn = "C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Buffers_cropdiver_classification", layer = "dun15_crop")
dun16 <- readOGR(dsn = "C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Buffers_cropdiver_classification", layer = "dun16_crop")
dun17 <- readOGR(dsn = "C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Buffers_cropdiver_classification", layer = "dun17_crop")
dun18 <- readOGR(dsn = "C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Buffers_cropdiver_classification", layer = "dun18_crop")
dun19 <- readOGR(dsn = "C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Buffers_cropdiver_classification", layer = "dun19_crop")
# Ordenar cultivos en tabla
head(dun15@data)
cul15 <- as.data.frame(unique(dun15@data$Cultiu))
colnames(cul15)[1] <- "Cultiu"
cul15_cult_grup <- dun15@data[,c(6,7)]
cul15_cult_grup <- cul15_cult_grup[-which(duplicated(cul15_cult_grup)), ]
cul15 <- inner_join(cul15, cul15_cult_grup, by = "Cultiu")
cul15$year <- "2015"
cul16 <- as.data.frame(unique(dun16@data$Cultiu))
colnames(cul16)[1] <- "Cultiu"
cul16_cult_grup <- dun16@data[,c(6,7)]
cul16_cult_grup <- cul16_cult_grup[-which(duplicated(cul16_cult_grup)), ]
cul16 <- inner_join(cul16, cul16_cult_grup, by = "Cultiu")
cul16$year <- "2016"
cul17 <- as.data.frame(unique(dun17@data$Cultiu))
colnames(cul17)[1] <- "Cultiu"
cul17_cult_grup <- dun17@data[,c(6,7)]
cul17_cult_grup <- cul17_cult_grup[-which(duplicated(cul17_cult_grup)), ]
cul17 <- inner_join(cul17, cul17_cult_grup, by = "Cultiu")
cul17$year <- "2017"
cul18 <- as.data.frame(unique(dun18@data$Cultiu))
colnames(cul18)[1] <- "Cultiu"
cul18_cult_grup <- dun18@data[,c(6,7)]
cul18_cult_grup <- cul18_cult_grup[-which(duplicated(cul18_cult_grup)), ]
cul18 <- inner_join(cul18, cul18_cult_grup, by = "Cultiu")
cul18$year <- "2018"
cul19 <- as.data.frame(unique(dun19@data$Cultiu))
colnames(cul19)[1] <- "Cultiu"
cul19_cult_grup <- dun19@data[,c(6,7)]
cul19_cult_grup <- cul19_cult_grup[-which(duplicated(cul19_cult_grup)), ]
cul19 <- inner_join(cul19, cul19_cult_grup, by = "Cultiu")
cul19$year <- "2019"
c <- full_join(cul15,cul16, by = "Cultiu", "Grup")
c2 <- full_join(c,cul17, by = "Cultiu", "Grup")
c3 <- full_join(c2,cul18, by = "Cultiu", "Grup")
c4 <- full_join(c3,cul19, by = "Cultiu", "Grup")
setwd("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/Data")
write.csv(c4, "clasificacion_cultivos_div.csv")
unique(dun19@data$Cultiu)
unique(dun19@data$Cultiu)
rm(list=ls())
library(rgdal)
library(rgeos)
library(raster)
library(sf)
# Calculate GIS layers of fallow variables to REMOVE the overlap
# 1. SG; 2. AES; 3. SIE
# 1. ---- Load layers: The ones of SG stay in their original version ----
# SG
sg14 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Second chapter/Data/GIS/SG", layer = "SG_2014_EPSG23031")
sg15 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Second chapter/Data/GIS/SG", layer = "SG_2015_EPSG23031")
sg16 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Second chapter/Data/GIS/SG", layer = "SG_2016_EPSG23031")
sg17 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Second chapter/Data/GIS/SG", layer = "SG_2017_EPSG23031")
#sg18 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Second chapter/Data/GIS/SG", layer = "SG_2018_EPSG23031")
#sg19 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Second chapter/Data/GIS/SG", layer = "SG_2019_EPSG23031")
# AES
aes14 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Second chapter/Data/GIS/AES/Only AES/EPSG23031", layer = "AES_2014_EPSG23031")
aes15 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Second chapter/Data/GIS/AES/Only AES/EPSG23031", layer = "AES_2015_EPSG23031")
aes16 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Second chapter/Data/GIS/AES/Only AES/EPSG23031", layer = "AES_2016_EPSG23031_FALLOW_intersect") # This layer has the buffer alraeady done (because it was giving troubles)
aes17 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Second chapter/Data/GIS/AES/Only AES/EPSG23031", layer = "AES_2017_EPSG23031")
# aes18 <- FALTAN
# aes19 <- FALTAN
# GREEN
# gre14 <- NO HABÍA GREENING TODAVÍA (PERO METO LOS BARBECHOS NORMALES IGUALMENTE???)
gre15 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/Greening", layer = "gre_15")
gre16 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/Greening", layer = "gre_16")
gre17 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/Greening", layer = "gre_17")
#gre18 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/Greening", layer = "gre_18")
#gre19 <- readOGR("C:/U
g15 <- erase(gre15,sg15)
g16 <- erase(gre16,sg16)
g17 <- erase(gre17,sg17)
# g18 <- erase(gre18,sg18) # Cuando tenga las AES del 18
# g19 <- erase(gre19,sg19) # Cuando tenga las AES del 19
# g14_only <- NO HAY (los meto igualmente?????)
g15_only <- erase(g15,aes15)
writeOGR(g15, dsn = "C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/Greening/GREEN_cutted", layer = "GREEN_noSG_2015_EPSG23031", driver = "ESRI Shapefile")
writeOGR(g16, dsn = "C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/Greening/GREEN_cutted", layer = "GREEN_noSG_2016_EPSG23031", driver = "ESRI Shapefile")
writeOGR(g17, dsn = "C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/Greening/GREEN_cutted", layer = "GREEN_noSG_2017_EPSG23031", driver = "ESRI Shapefile")
#
g15_2 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/Greening/GREEN_cutted", layer = "GREEN_noSG_2015_EPSG23031")
# g14_only <- NO HAY (los meto igualmente?????)
g15_only <- erase(g15_2,aes15)
g16_only <- erase(g16,aes16)
#
g15_2 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/Greening/GREEN_cutted", layer = "GREEN_noSG_2015_EPSG23031")
# g14_only <- NO HAY (los meto igualmente?????)
g15_only <- erase(g15_2,aes15)
#
g15_2 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/Greening/GREEN_cutted", layer = "GREEN_noSG_2015_EPSG23031")
# g14_only <- NO HAY (los meto igualmente?????)
g15_only <- erase(g15_2,aes15)
# g14 <- NO HAY (los meto igualmente?????)
g15 <- erase(gre15,sg15)
# Write the layer to modify the mistakes that are produced in the layer and that doesnt allow to cut it later on
writeOGR(g15, dsn = "C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/Greening/GREEN_cutted", layer = "GREEN_noSG_2015_EPSG23031", driver = "ESRI Shapefile")
# Write the layer to modify the mistakes that are produced in the layer and that doesnt allow to cut it later on
writeOGR(g15, dsn = "C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/Greening/GREEN_cutted", layer = "GREEN_noSG_2015_EPSG23031", driver = "ESRI Shapefile")
# g14_only <- NO HAY (los meto igualmente?????)
g15_only <- erase(g15,aes15)
#
g15_2 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/Greening/GREEN_cutted", layer = "GREEN_noSG_2015_EPSG23031")
# g14_only <- NO HAY (los meto igualmente?????)
g15_only <- erase(g15_2,aes15)
aes15 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Second chapter/Data/GIS/AES/Only AES/EPSG23031", layer = "AES_2015_EPSG23031")
# g14_only <- NO HAY (los meto igualmente?????)
g15_only <- erase(g15_2,aes15)
g17_only <- erase(g17,aes17)
aes17 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Second chapter/Data/GIS/AES/Only AES/EPSG23031", layer = "AES_2017_EPSG23031")
g17_only <- erase(g17,aes17)
aes17 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Second chapter/Data/GIS/AES/Only AES/EPSG23031", layer = "AES_2017_EPSG23031")
g17_only <- erase(g17,aes17)
writeOGR(g15_only, dsn = "C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/Greening", layer = "GREENcutted_2015_EPSG23031", driver = "ESRI Shapefile")
writeOGR(g16_only, dsn = "C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/Greening", layer = "GREENcutted_2016_EPSG23031", driver = "ESRI Shapefile")
writeOGR(g17_only, dsn = "C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/Greening", layer = "GREENcutted_2017_EPSG23031", driver = "ESRI Shapefile")
rm(list=ls())
library(rgdal)
library(rgeos)
library(raster)
library(dplyr)
# ---- Load data ----
# Transects
tr <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS", "Trans_2010_2018_ch3_EPSG23031") # Contains transects sampled each year (1/0)
# AES
aes14 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/AES", layer = "AEScutted_2014_EPSG23031")
aes15 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/AES", layer = "AEScutted_2015_EPSG23031")
aes16 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/AES", layer = "AEScutted_2016_EPSG23031")
aes17 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/AES", layer = "AEScutted_2017_EPSG23031")
sg14 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/SG", layer = "SG_2014_EPSG23031")
sg15 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/SG", layer = "SG_2015_EPSG23031")
sg16 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/SG", layer = "SG_2016_EPSG23031")
sg17 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/SG", layer = "SG_2017_EPSG23031")
#sg18 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Second chapter/Data/GIS/SG", layer = "SG_2018_EPSG23031")
#sg19 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Second chapter/Data/GIS/SG", layer = "SG_2019_EPSG23031")
buf <- gBuffer(tr, byid = TRUE, width = 500)
rm(list=ls())
library(rgdal)
library(rgeos)
library(raster)
library(dplyr)
# ---- Load data (layers without overlap) ----
# Transects
tr <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS", "Trans_2010_2018_ch3_EPSG23031") # Contains transects sampled each year (1/0)
# SG
sg14 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/SG", layer = "SG_2014_EPSG23031")
sg15 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/SG", layer = "SG_2015_EPSG23031")
sg16 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/SG", layer = "SG_2016_EPSG23031")
sg17 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/SG", layer = "SG_2017_EPSG23031")
#sg18 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Second chapter/Data/GIS/SG", layer = "SG_2018_EPSG23031")
#sg19 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Second chapter/Data/GIS/SG", layer = "SG_2019_EPSG23031")
# AES
aes14 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/AES", layer = "AEScutted_2014_EPSG23031")
aes15 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/AES", layer = "AEScutted_2015_EPSG23031")
aes16 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/AES", layer = "AEScutted_2016_EPSG23031")
aes17 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/AES", layer = "AEScutted_2017_EPSG23031")
#aes18 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/AES", layer = "AEScutted_2018_EPSG23031")
#aes19 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/AES", layer = "AEScutted_2019_EPSG23031")
# GREEN
#?green14 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/Greening", layer = "GREENcutted_2014_EPSG23031")
green15 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/Greening", layer = "GREENcutted_2015_EPSG23031")
green16 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/Greening", layer = "GREENcutted_2016_EPSG23031")
green17 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/Greening", layer = "GREENcutted_2017_EPSG23031")
#green18 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/Greening", layer = "GREENcutted_2018_EPSG23031")
#green19 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/Greening", layer = "GREENcutted_2019_EPSG23031")
# Data frame to fill up:
management <- as.data.frame(matrix(NA, nrow = nrow(buf), ncol = 1))
colnames(management)[1] <- "Codi"
management$Codi <- buf@data$Codi
buf <- gBuffer(tr, byid = TRUE, width = 500)
# Data frame to fill up:
management <- as.data.frame(matrix(NA, nrow = nrow(buf), ncol = 1))
colnames(management)[1] <- "Codi"
management$Codi <- buf@data$Codi
View(management)
layers <- list(aes14, aes15)
layers_names <- c("aes14", "aes15")
for (i in 1:length(layers)){
poli <- raster::intersect(buf, layers[[i]]) # Intersect buffers with management fields polygons
poli$ha_intersect_buffer <- area(poli)/10000 # Calculate area of what falls in the buffer (in ha)
# Proportional intersecting area of fallow:
poli$ha_intersect_fallow <- poli$ha_intersect_buffer*poli$HA_Fallow/poli$HA_SP
transect_area <- aggregate(ha_intersect_fallow ~ Codi, data = poli, FUN = sum) # Sum area of polygons belonging to a buffer
colnames(transect_area)[2] <- paste("area", layers_names[i], sep = "_") # Change column name to store it
management <- left_join(management, transect_area, by = "Codi") # Store area
management[is.na(management)] <- 0 # Substitute NA by 0
}
# ------ 2016 & 2017 ----
# Strip of fallow is digitalized
# So only sum HA of Fallow fields
layers <- list(aes16, aes17)
layers_names <- c("aes16", "aes17")
for (i in 1:length(layers)){
poli <- raster::intersect(buf, layers[[i]]) # Intersect buffers with management fields polygons
poli$ha_intersect_buffer <- area(poli)/10000 # Calculate area of what falls in the buffer (in ha)
# HERE NOTHING
# Proportional intersecting area of fallow:
# poli$ha_intersect_fallow <- poli$ha_intersect_buffer*poli$HA_Fallow/poli$HA_SP
transect_area <- aggregate(ha_intersect_buffer ~ Codi, data = poli, FUN = sum) # Sum area of polygons belonging to a buffer
colnames(transect_area)[2] <- paste("area", layers_names[i], sep = "_") # Change column name to store it
management <- left_join(management, transect_area, by = "Codi") # Store area
management[is.na(management)] <- 0 # Substitute NA by 0
}
layers <- list(sg14, sg15, sg16, sg17, sg18, sg19)
layers_names <- c("sg14", "sg15", "sg16", "sg17", "sg18", "sg19")
for (i in 1:length(layers)){
poli <- raster::intersect(buf, layers[[i]]) # Intersect buffers with management fields polygons
poli$ha_intersect_buffer <- area(poli)/10000 # Calculate area of what falls in the buffer (in ha)
# HERE NOTHING
# Proportional intersecting area of fallow:
# poli$ha_intersect_fallow <- poli$ha_intersect_buffer*poli$HA_Fallow/poli$HA_SP
transect_area <- aggregate(ha_intersect_buffer ~ Codi, data = poli, FUN = sum) # Sum area of polygons belonging to a buffer
colnames(transect_area)[2] <- paste("area", layers_names[i], sep = "_") # Change column name to store it
management <- left_join(management, transect_area, by = "Codi") # Store area
management[is.na(management)] <- 0 # Substitute NA by 0
}
View(management)
layers <- list(sg14, sg15, sg16, sg17, sg18, sg19)
layers_names <- c("sg14", "sg15", "sg16", "sg17", "sg18", "sg19")
for (i in 1:length(layers)){
poli <- raster::intersect(buf, layers[[i]]) # Intersect buffers with management fields polygons
poli$ha_intersect_buffer <- area(poli)/10000 # Calculate area of what falls in the buffer (in ha)
# HERE NOTHING
# Proportional intersecting area of fallow:
# poli$ha_intersect_fallow <- poli$ha_intersect_buffer*poli$HA_Fallow/poli$HA_SP
transect_area <- aggregate(ha_intersect_buffer ~ Codi, data = poli, FUN = sum) # Sum area of polygons belonging to a buffer
colnames(transect_area)[2] <- paste("area", layers_names[i], sep = "_") # Change column name to store it
management <- left_join(management, transect_area, by = "Codi") # Store area
management[is.na(management)] <- 0 # Substitute NA by 0
}
sg18 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Second chapter/Data/GIS/SG", layer = "SG_2018_EPSG23031")
sg19 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Second chapter/Data/GIS/SG", layer = "SG_2019_EPSG23031")
# Data frame to fill up:
management <- as.data.frame(matrix(NA, nrow = nrow(buf), ncol = 1))
colnames(management)[1] <- "Codi"
management$Codi <- buf@data$Codi
# ---- AES ----
# ------ 2014-2015 ----
# Calculate proportional area, because the strip of fallow is not digital
# So calculate the HA_Fallow proportional to the intersected area
layers <- list(aes14, aes15)
layers_names <- c("aes14", "aes15")
for (i in 1:length(layers)){
poli <- raster::intersect(buf, layers[[i]]) # Intersect buffers with management fields polygons
poli$ha_intersect_buffer <- area(poli)/10000 # Calculate area of what falls in the buffer (in ha)
# Proportional intersecting area of fallow:
poli$ha_intersect_fallow <- poli$ha_intersect_buffer*poli$HA_Fallow/poli$HA_SP
transect_area <- aggregate(ha_intersect_fallow ~ Codi, data = poli, FUN = sum) # Sum area of polygons belonging to a buffer
colnames(transect_area)[2] <- paste("area", layers_names[i], sep = "_") # Change column name to store it
management <- left_join(management, transect_area, by = "Codi") # Store area
management[is.na(management)] <- 0 # Substitute NA by 0
}
# ------ 2016 & 2017 ----
# Strip of fallow is digitalized
# So only sum HA of Fallow fields
layers <- list(aes16, aes17)
layers_names <- c("aes16", "aes17")
for (i in 1:length(layers)){
poli <- raster::intersect(buf, layers[[i]]) # Intersect buffers with management fields polygons
poli$ha_intersect_buffer <- area(poli)/10000 # Calculate area of what falls in the buffer (in ha)
# HERE NOTHING
# Proportional intersecting area of fallow:
# poli$ha_intersect_fallow <- poli$ha_intersect_buffer*poli$HA_Fallow/poli$HA_SP
transect_area <- aggregate(ha_intersect_buffer ~ Codi, data = poli, FUN = sum) # Sum area of polygons belonging to a buffer
colnames(transect_area)[2] <- paste("area", layers_names[i], sep = "_") # Change column name to store it
management <- left_join(management, transect_area, by = "Codi") # Store area
management[is.na(management)] <- 0 # Substitute NA by 0
}
# ---- 2018 & 2019 : FALTA ----
# ---- SG 14-18 ----
layers <- list(sg14, sg15, sg16, sg17, sg18, sg19)
layers_names <- c("sg14", "sg15", "sg16", "sg17", "sg18", "sg19")
for (i in 1:length(layers)){
poli <- raster::intersect(buf, layers[[i]]) # Intersect buffers with management fields polygons
poli$ha_intersect_buffer <- area(poli)/10000 # Calculate area of what falls in the buffer (in ha)
# HERE NOTHING
# Proportional intersecting area of fallow:
# poli$ha_intersect_fallow <- poli$ha_intersect_buffer*poli$HA_Fallow/poli$HA_SP
transect_area <- aggregate(ha_intersect_buffer ~ Codi, data = poli, FUN = sum) # Sum area of polygons belonging to a buffer
colnames(transect_area)[2] <- paste("area", layers_names[i], sep = "_") # Change column name to store it
management <- left_join(management, transect_area, by = "Codi") # Store area
management[is.na(management)] <- 0 # Substitute NA by 0
}
View(management)
sg14 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/SG", layer = "SG_2014_EPSG23031")
colnames(sg14@data)[colnames(sg14@data) == "Codi"] <- "Codi.2"
sg15 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/SG", layer = "SG_2015_EPSG23031")
sg16 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/SG", layer = "SG_2016_EPSG23031")
sg17 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/SG", layer = "SG_2017_EPSG23031")
#sg18 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Second chapter/Data/GIS/SG", layer = "SG_2018_EPSG23031")
#sg19 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Second chapter/Data/GIS/SG", layer = "SG_2019_EPSG23031")
# AES
aes14 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/AES", layer = "AEScutted_2014_EPSG23031")
aes15 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/AES", layer = "AEScutted_2015_EPSG23031")
aes16 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/AES", layer = "AEScutted_2016_EPSG23031")
aes17 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/AES", layer = "AEScutted_2017_EPSG23031")
#aes18 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/AES", layer = "AEScutted_2018_EPSG23031")
#aes19 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/AES", layer = "AEScutted_2019_EPSG23031")
# GREEN
#?green14 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/Greening", layer = "GREENcutted_2014_EPSG23031")
green15 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/Greening", layer = "GREENcutted_2015_EPSG23031")
green16 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/Greening", layer = "GREENcutted_2016_EPSG23031")
green17 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/Greening", layer = "GREENcutted_2017_EPSG23031")
#green18 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/Greening", layer = "GREENcutted_2018_EPSG23031")
#green19 <- readOGR("C:/Users/ana.sanz/Documents/PhD_20_sept/Third chapter/GIS/Fallow/Greening", layer = "GREENcutted_2019_EPSG23031")
# ---- Create buffers and calculate area ----
buf <- gBuffer(tr, byid = TRUE, width = 500)
#writeOGR(buf, dsn = "C:/Users/ana.sanz/OneDrive/PhD/Second chapter/Data/GIS", layer = "Buffer_transects", driver = "ESRI Shapefile")
# Data frame to fill up:
management <- as.data.frame(matrix(NA, nrow = nrow(buf), ncol = 1))
colnames(management)[1] <- "Codi"
management$Codi <- buf@data$Codi
# ---- AES ----
# ------ 2014-2015 ----
# Calculate proportional area, because the strip of fallow is not digital
# So calculate the HA_Fallow proportional to the intersected area
layers <- list(aes14, aes15)
layers_names <- c("aes14", "aes15")
for (i in 1:length(layers)){
poli <- raster::intersect(buf, layers[[i]]) # Intersect buffers with management fields polygons
poli$ha_intersect_buffer <- area(poli)/10000 # Calculate area of what falls in the buffer (in ha)
# Proportional intersecting area of fallow:
poli$ha_intersect_fallow <- poli$ha_intersect_buffer*poli$HA_Fallow/poli$HA_SP
transect_area <- aggregate(ha_intersect_fallow ~ Codi, data = poli, FUN = sum) # Sum area of polygons belonging to a buffer
colnames(transect_area)[2] <- paste("area", layers_names[i], sep = "_") # Change column name to store it
management <- left_join(management, transect_area, by = "Codi") # Store area
management[is.na(management)] <- 0 # Substitute NA by 0
}
# ------ 2016 & 2017 ----
# Strip of fallow is digitalized
# So only sum HA of Fallow fields
layers <- list(aes16, aes17)
layers_names <- c("aes16", "aes17")
for (i in 1:length(layers)){
poli <- raster::intersect(buf, layers[[i]]) # Intersect buffers with management fields polygons
poli$ha_intersect_buffer <- area(poli)/10000 # Calculate area of what falls in the buffer (in ha)
# HERE NOTHING
# Proportional intersecting area of fallow:
# poli$ha_intersect_fallow <- poli$ha_intersect_buffer*poli$HA_Fallow/poli$HA_SP
transect_area <- aggregate(ha_intersect_buffer ~ Codi, data = poli, FUN = sum) # Sum area of polygons belonging to a buffer
colnames(transect_area)[2] <- paste("area", layers_names[i], sep = "_") # Change column name to store it
management <- left_join(management, transect_area, by = "Codi") # Store area
management[is.na(management)] <- 0 # Substitute NA by 0
}
# ---- 2018 & 2019 : FALTA ----
# ---- SG 14-18 ----
layers <- list(sg14, sg15, sg16, sg17)
layers_names <- c("sg14", "sg15", "sg16", "sg17")
for (i in 1:length(layers)){
poli <- raster::intersect(buf, layers[[i]]) # Intersect buffers with management fields polygons
poli$ha_intersect_buffer <- area(poli)/10000 # Calculate area of what falls in the buffer (in ha)
# HERE NOTHING
# Proportional intersecting area of fallow:
# poli$ha_intersect_fallow <- poli$ha_intersect_buffer*poli$HA_Fallow/poli$HA_SP
transect_area <- aggregate(ha_intersect_buffer ~ Codi, data = poli, FUN = sum) # Sum area of polygons belonging to a buffer
colnames(transect_area)[2] <- paste("area", layers_names[i], sep = "_") # Change column name to store it
management <- left_join(management, transect_area, by = "Codi") # Store area
management[is.na(management)] <- 0 # Substitute NA by 0
}
View(management)
layers <- list(green15, green16, green17)
layers_names <- c("green15", "green16", "green17")
for (i in 1:length(layers)){
poli <- raster::intersect(buf, layers[[i]]) # Intersect buffers with management fields polygons
poli$ha_intersect_buffer <- area(poli)/10000 # Calculate area of what falls in the buffer (in ha)
# HERE NOTHING
# Proportional intersecting area of fallow:
# poli$ha_intersect_fallow <- poli$ha_intersect_buffer*poli$HA_Fallow/poli$HA_SP
transect_area <- aggregate(ha_intersect_buffer ~ Codi, data = poli, FUN = sum) # Sum area of polygons belonging to a buffer
colnames(transect_area)[2] <- paste("area", layers_names[i], sep = "_") # Change column name to store it
management <- left_join(management, transect_area, by = "Codi") # Store area
management[is.na(management)] <- 0 # Substitute NA by 0
}
View(management)
i = 1
poli <- raster::intersect(buf, layers[[i]]) # Intersect buffers with management fields polygons
poli
plot(poli)
area(poli)
poli$ha_intersect_buffer
poli@data$Codi
transect_area <- aggregate(ha_intersect_buffer ~ Codi, data = poli, FUN = sum) # Sum area of polygons belonging to a buffer
poli$ha_intersect_buffer <- area(poli)/10000 # Calculate area of what falls in the buffer (in ha)
transect_area <- aggregate(ha_intersect_buffer ~ Codi, data = poli, FUN = sum) # Sum area of polygons belonging to a buffer
transect_area
