fc[j,t,k]<- f[j,t,k] * pi[j,t,k]                 ## pi=percent area of k; drops out if constant
fct[j,t,k]<-fc[j,t,k]/pcap[j,t]
}
pcap[j,t] <- sum(fc[j,t, 1:nG]) # Different per site and year (sum over all bins)
f.0[j,t] <- 2 * dnorm(0,0, 1/sigma[j,t]^2) # Prob density at 0
y[j,t] ~ dbin(pcap[j,t], N[j,t])
N[j,t] ~ dpois(lambda[j,t])
lambda[j,t] <- exp(log.lambda.site[site[j]] + log.lambda.year[year_index[t]] + bYear.lam*year1[t] + w[j,t])
w[j,t] <- rho * w[j,t-1] + eps[j,t]
eps[j,t] ~ dnorm(0, tau)
}
}
# Derived parameters
for(t in 1:nyears){
popindex[t] <- sum(lambda[,t])
}
# Expected abundance per year inside model
lam.tot[1] <- popindex[1] # Expected abundance in year 1
for (i in 2:nyears){
lam.tot[i] <- lam.tot[i-1] * # Here I add the starting population size as a baseline for the trend
exp(bYear.lam)}
}",fill=TRUE, file = "s_sigma(integral)[obs(o,j,t)_covVeg(j,t)_year.random(t)]_lambda[alpha.site.random(j)_year.random(t)_beta.year(j)_w].txt")
# Inits
Nst <- y.sum + 1
inits <- function(){list(mu.sig = runif(1, log(30), log(50)), sig.sig = runif(1), bzB.sig = runif(1),
mu.lam.site = runif(1), sig.lam.site = 0.2, sig.lam.year = 0.3, bYear.lam = runif(1),
N = Nst)}
# Params
params <- c( "mu.sig", "sig.sig", "bVeg.sig", "sig.obs", "log.sigma.year", # Save also observer effect
"mu.lam.site", "sig.lam.site", "sig.lam.year", "bYear.lam", "log.lambda.year", # Save year effect
"popindex", "sd", "rho", "lam.tot"
)
# MCMC settings
nc <- 3 ; ni <- 60000 ; nb <- 4000 ; nt <- 4
# With jagsUI
out <- jags(data1, inits, params, "s_sigma(integral)[obs(o,j,t)_covVeg(j,t)_year.random(t)]_lambda[alpha.site.random(j)_year.random(t)_beta.year(j)_w].txt", n.chain = nc,
n.thin = nt, n.iter = ni, n.burnin = nb, parallel = TRUE)
summary <- out$summary
print(out)
summary <- out$summary
View(summary)
data_comp <- list(lam.tot = lam.tot,
mu.sig.obs = mu.sig.obs, sig.sig.obs = sig.sig.obs,
b.sig.zoneB = b.sig.zoneB,
mu.lam.alpha.site = mu.lam.alpha.site,
sig.lam.alpha.site = sig.lam.alpha.site,
sig.lam.year = sig.lam.year,
b.lam.year = b.lam.year,
rho = rho, sig.lam.eps = sig.lam.eps)
data_comp
data_comp <- list(lam.tot = lam.tot,
mu.sig.obs = mu.sig.obs, sig.sig.obs = sig.sig.obs,
bVeg.sig = bVeg.sig,
mu.lam.alpha.site = mu.lam.alpha.site,
sig.lam.alpha.site = sig.lam.alpha.site,
sig.lam.year = sig.lam.year,
b.lam.year = b.lam.year,
rho = rho, sig.lam.eps = sig.lam.eps)
data_comp
rm(list=ls())
library(rjags)
library(jagsUI)
library(dplyr)
library(rtrim)
###################################################################
##                       Prepare data                           ###
###################################################################
#setwd("C:/Users/Ana/Documents/PhD/Second chapter/Data")
setwd("S:/PhD/Second chapter/Data")
d <- read.csv("DataDS_ready_ALL.csv")
colnames(d)[which(colnames(d) == "Count")] <- "Cluster"
# Load species names
s <- read.csv("sp_trend_dg.csv", sep = ";")
s_good <- as.vector(s$Species[which(s$include_samplesize == 1)])
s_good <- s_good[42]
s_doubt <- as.vector(s$Species[which(s$Doubt_samplesize == 1)])
xxx = 1
s_good <- as.vector(s$Species[which(s$include_samplesize == 1)])
s_good
s_good <- s_good(-c("CIJUN", "COCOT", "OEHIS", "TUMER", "TUVIS"))
s <- read.csv("sp_trend_dg.csv", sep = ";")
s_good <- as.vector(s$Species[which(s$include_samplesize == 1)])
s_good <- s_good[-c("CIJUN", "COCOT", "OEHIS", "TUMER", "TUVIS")]
problems <- c("CIJUN", "COCOT", "OEHIS", "TUMER", "TUVIS")
problems <- c("CIJUN", "COCOT", "OEHIS", "TUMER", "TUVIS")
s_good <- s_good[-which(problems)]
s_good <- as.vector(s$Species[which(s$include_samplesize == 1)])
problems <- c("CIJUN", "COCOT", "OEHIS", "TUMER", "TUVIS")
s_good <- s_good[-which(problems)]
problems
s_good <- s_good[-which(s_good %in% problems)]
s_good
# Start loop
xxx = "TERAX"
d_tr <- d[ ,which(colnames(d) %in% c("Species",  "T_Y", "Observer"))]
d_tr_all <- data.frame(T_Y = unique(d_tr$T_Y), id = NA)
d_tr$Observer <- as.character(d_tr$Observer)
d_tr_all_obs <- left_join(d_tr_all, d_tr)
d_tr_all_obs <- d_tr_all_obs[ ,c(1,4)]
d_tr_all_obs <- d_tr_all_obs[which(!duplicated(d_tr_all_obs)), ] # Table with all sampled fields and which observer sampled it
sp <- d[which(d$Species == s_good[xxx]), which(colnames(d) %in% c("Year", "Banda", "transectID", "T_Y", "Species", "Observer", "Cluster"))] # Select species spAL and all years
sp <- arrange(sp, Year, transectID) #Ordered
sp_detec_transectID <- unique(sp$transectID)
sp$Observer <- as.character(sp$Observer)
absent <- anti_join(d_tr_all,sp) # Transects with 0 abundance, add to sp.
colnames(absent)[2] <- "Banda" # Format it to add the rows to sp
absent$T_Y <- as.character(absent$T_Y)
absent$Species <- s_good[xxx]
absent$Cluster <- NA
absent <- left_join(absent, d_tr_all_obs)
for (i in 1:nrow(absent)){ # Format to join absent - detections
cent <- substr(absent$T_Y[i], 10,10) # To include SI102 (cents)
cent <- as.numeric(cent)
if(is.na(cent)){
absent$Year[i] <- substr(absent$T_Y[i], 6,9)
absent$transectID[i] <- substr(absent$T_Y[i], 1,4)
} else { absent$Year[i] <- substr(absent$T_Y[i], 7,10)
absent$transectID[i] <- substr(absent$T_Y[i], 1,5)}
}
absent$count <- 0
sp$count <- 1
all_sp <- rbind(sp,absent) # Include transects with abundance 0
all_sp <- arrange(all_sp, Year, transectID) # Ordered
absent$count <- 0
sp
absent
xxx
s_good
# Start loop
xxx = 2
# To take into account transects with abundance 0
# 1. Select all transects IDs from all species observations
# 2. Join the observations of MECAL (for example) with all transects so that they remain with NA if the
# species was there but it wasnt sampled
d_tr <- d[ ,which(colnames(d) %in% c("Species",  "T_Y", "Observer"))]
d_tr_all <- data.frame(T_Y = unique(d_tr$T_Y), id = NA)
d_tr$Observer <- as.character(d_tr$Observer)
d_tr_all_obs <- left_join(d_tr_all, d_tr)
d_tr_all_obs <- d_tr_all_obs[ ,c(1,4)]
d_tr_all_obs <- d_tr_all_obs[which(!duplicated(d_tr_all_obs)), ] # Table with all sampled fields and which observer sampled it
sp <- d[which(d$Species == s_good[xxx]), which(colnames(d) %in% c("Year", "Banda", "transectID", "T_Y", "Species", "Observer", "Cluster"))] # Select species spAL and all years
sp <- arrange(sp, Year, transectID) #Ordered
sp_detec_transectID <- unique(sp$transectID)
sp$Observer <- as.character(sp$Observer)
absent <- anti_join(d_tr_all,sp) # Transects with 0 abundance, add to sp.
colnames(absent)[2] <- "Banda" # Format it to add the rows to sp
absent$T_Y <- as.character(absent$T_Y)
absent$Species <- s_good[xxx]
absent$Cluster <- NA
absent <- left_join(absent, d_tr_all_obs)
for (i in 1:nrow(absent)){ # Format to join absent - detections
cent <- substr(absent$T_Y[i], 10,10) # To include SI102 (cents)
cent <- as.numeric(cent)
if(is.na(cent)){
absent$Year[i] <- substr(absent$T_Y[i], 6,9)
absent$transectID[i] <- substr(absent$T_Y[i], 1,4)
} else { absent$Year[i] <- substr(absent$T_Y[i], 7,10)
absent$transectID[i] <- substr(absent$T_Y[i], 1,5)}
}
absent$count <- 0
sp$count <- 1
all_sp <- rbind(sp,absent) # Include transects with abundance 0
all_sp <- arrange(all_sp, Year, transectID) # Ordered
absent$count <- 0
sp
sp
###################################################################
##                       HDS ANALYSIS                           ###
###################################################################
# ---- Information: bins, years, sites ----
strip.width <- 200
dist.breaks <- c(0,25,50,100,200)
int.w <- diff(dist.breaks) # width of distance categories (v)
midpt <- diff(dist.breaks)/2+dist.breaks[-5]
nG <- length(dist.breaks)-1
yrs <- c(2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018) # I HAVE TO CONVERT THIS FROM 0-7 (but nyrs is still 8!)
nyrs <- length(yrs)
# ---- Distance observations ----
# Format
all.sites <- unique(all_sp$transectID)
all.sites <- sort(all.sites,descreasing = TRUE)
max.sites <- length(all.sites)
m <- matrix(NA, nrow = length(all.sites), ncol = nyrs)
rownames(m) <- all.sites
colnames(m) <- yrs
# Add counts > 0
count <- aggregate(Species ~ Year + transectID, FUN = length, data = sp)
for (i in 1:nrow(count)){
m[which(rownames(m) %in% count$transectID[i]), which(colnames(m) %in% count$Year[i])] <- count$Species[i]
}
# Add absences (0)
for (i in 1:nrow(absent)){
m[which(rownames(m) %in% absent$transectID[i]), which(colnames(m) %in% absent$Year[i])] <- absent$count[i]
}
# Only to check: Count of individuals per year
count.year <- colSums(m,na.rm = TRUE)
# Count of individuals per year corrected by cluster size
average_clus <- mean(sp$Cluster) # TO INCLUDE IN THE MODEL
count.year_clus <- count.year*average_clus
# Zone (Occidental = 0; Oriental = 1)
zone <- as.data.frame(m)
zone_codi <- as.vector(rownames(zone))
zone$Codi <- zone_codi
for (i in 1:nrow(zone)){
if(substr(zone$Codi[i], 1,2) == "BA"){zone[i,1:9] <- 0}
if(substr(zone$Codi[i], 1,2) == "BM"){zone[i,1:9] <- 1}
if(substr(zone$Codi[i], 1,2) == "SI"){zone[i,1:9] <- 1}
if(substr(zone$Codi[i], 1,2) == "AF"){zone[i,1:9] <- 0}
if(substr(zone$Codi[i], 1,2) == "BE"){zone[i,1:9] <- 1}
if(substr(zone$Codi[i], 1,2) == "GR"){zone[i,1:9] <- 0}
}
zone <- zone[,-10]
# Year
yrs2 <- c(0, 1, 2, 3, 4, 5, 6, 7, 8) # To make it as a continuous variable, otherwise it doesnt work
year <- matrix(NA,nrow = max.sites, ncol = nyrs)
colnames(year) <- yrs
for (i in 1:nyrs){
year[ ,which(colnames(year) %in% yrs[i])] <- rep(yrs2[i], max.sites)
}
# Observer
# Format
obs <- matrix(NA, nrow = max.sites, ncol = nyrs)
rownames(obs) <- all.sites
colnames(obs) <- yrs
# Add observers for fields with counts > 0
for (i in 1:nrow(sp)){
obs[which(rownames(obs) %in% sp$transectID[i]), which(colnames(obs) %in% sp$Year[i])] <- sp$Observer[i]
}
# Add observers for fields with absences (0)
for (i in 1:nrow(absent)){
obs[which(rownames(obs) %in% absent$transectID[i]), which(colnames(obs) %in% absent$Year[i])] <- absent$Observer[i]
}
# Distance class and ind
nind <- nrow(sp)
dclass <- sp$Banda
# Distance class and ind
nind <- nrow(sp)
nind
m
zone
# Co-variates
zon <- as.vector(zone[,1])
zon
year
obs
ob <- as.numeric(factor(obs)) # JAGS doesn't accept categorical variables
ob
obs
ob <- as.matrix(obs)
ob
ob <- as.matrix(as.numeric(factor(obs))))
ob <- as.matrix(as.numeric(factor(obs)))
ob
factor(obs)
obs
as.numeric(obs)
as.matrix(obs)
matrix(obs)
ob <- as.numeric(as.matrix(obs))
ob
ob <- as.numeric(factor(as.matrix(obs)))
ob
ob <- NULL
for (i in 1:nyrs){
ob <- c(ob,obs[1:length(all.sites),i])}
ob
obs
View(obs)
class(obs)
as.numeric(factor(obs))
factor(obs)
ob <- as.numeric(obs)
ob <- as.factor(obs)
ob
ob <- as.data.frame(obs)
ob
ob <- as.data.frame(factor(obs))
ob
obs
class(obs) <- "numeric"
obs
obs
# Load packages
rm(list=ls())
library(rjags)
library(jagsUI)
library(dplyr)
library(rtrim)
###################################################################
##                       Prepare data                           ###
###################################################################
#setwd("C:/Users/Ana/Documents/PhD/Second chapter/Data")
setwd("S:/PhD/Second chapter/Data")
d <- read.csv("DataDS_ready_ALL.csv")
colnames(d)[which(colnames(d) == "Count")] <- "Cluster"
# Load species names
s <- read.csv("sp_trend_dg.csv", sep = ";")
s_good <- as.vector(s$Species[which(s$include_samplesize == 1)])
problems <- c("CIJUN", "COCOT", "OEHIS", "TUMER", "TUVIS")
s_good <- s_good[-which(s_good %in% problems)]
s_doubt <- as.vector(s$Species[which(s$Doubt_samplesize == 1)])
# Start loop
xxx = 2
# To take into account transects with abundance 0
# 1. Select all transects IDs from all species observations
# 2. Join the observations of MECAL (for example) with all transects so that they remain with NA if the
# species was there but it wasnt sampled
d_tr <- d[ ,which(colnames(d) %in% c("Species",  "T_Y", "Observer"))]
d_tr_all <- data.frame(T_Y = unique(d_tr$T_Y), id = NA)
d_tr$Observer <- as.character(d_tr$Observer)
d_tr_all_obs <- left_join(d_tr_all, d_tr)
d_tr_all_obs <- d_tr_all_obs[ ,c(1,4)]
d_tr_all_obs <- d_tr_all_obs[which(!duplicated(d_tr_all_obs)), ] # Table with all sampled fields and which observer sampled it
sp <- d[which(d$Species == s_good[xxx]), which(colnames(d) %in% c("Year", "Banda", "transectID", "T_Y", "Species", "Observer", "Cluster"))] # Select species spAL and all years
sp <- arrange(sp, Year, transectID) #Ordered
sp_detec_transectID <- unique(sp$transectID)
sp$Observer <- as.character(sp$Observer)
absent <- anti_join(d_tr_all,sp) # Transects with 0 abundance, add to sp.
colnames(absent)[2] <- "Banda" # Format it to add the rows to sp
absent$T_Y <- as.character(absent$T_Y)
absent$Species <- s_good[xxx]
absent$Cluster <- NA
absent <- left_join(absent, d_tr_all_obs)
for (i in 1:nrow(absent)){ # Format to join absent - detections
cent <- substr(absent$T_Y[i], 10,10) # To include SI102 (cents)
cent <- as.numeric(cent)
if(is.na(cent)){
absent$Year[i] <- substr(absent$T_Y[i], 6,9)
absent$transectID[i] <- substr(absent$T_Y[i], 1,4)
} else { absent$Year[i] <- substr(absent$T_Y[i], 7,10)
absent$transectID[i] <- substr(absent$T_Y[i], 1,5)}
}
absent$count <- 0
sp$count <- 1
all_sp <- rbind(sp,absent) # Include transects with abundance 0
all_sp <- arrange(all_sp, Year, transectID) # Ordered
absent$count <- 0
###################################################################
##                       HDS ANALYSIS                           ###
###################################################################
# ---- Information: bins, years, sites ----
strip.width <- 200
dist.breaks <- c(0,25,50,100,200)
int.w <- diff(dist.breaks) # width of distance categories (v)
midpt <- diff(dist.breaks)/2+dist.breaks[-5]
nG <- length(dist.breaks)-1
yrs <- c(2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018) # I HAVE TO CONVERT THIS FROM 0-7 (but nyrs is still 8!)
nyrs <- length(yrs)
# ---- Distance observations ----
# Format
all.sites <- unique(all_sp$transectID)
all.sites <- sort(all.sites,descreasing = TRUE)
max.sites <- length(all.sites)
m <- matrix(NA, nrow = length(all.sites), ncol = nyrs)
rownames(m) <- all.sites
colnames(m) <- yrs
# Add counts > 0
count <- aggregate(Species ~ Year + transectID, FUN = length, data = sp)
for (i in 1:nrow(count)){
m[which(rownames(m) %in% count$transectID[i]), which(colnames(m) %in% count$Year[i])] <- count$Species[i]
}
# Add absences (0)
for (i in 1:nrow(absent)){
m[which(rownames(m) %in% absent$transectID[i]), which(colnames(m) %in% absent$Year[i])] <- absent$count[i]
}
# Only to check: Count of individuals per year
count.year <- colSums(m,na.rm = TRUE)
# Count of individuals per year corrected by cluster size
average_clus <- mean(sp$Cluster) # TO INCLUDE IN THE MODEL
count.year_clus <- count.year*average_clus
# Zone (Occidental = 0; Oriental = 1)
zone <- as.data.frame(m)
zone_codi <- as.vector(rownames(zone))
zone$Codi <- zone_codi
for (i in 1:nrow(zone)){
if(substr(zone$Codi[i], 1,2) == "BA"){zone[i,1:9] <- 0}
if(substr(zone$Codi[i], 1,2) == "BM"){zone[i,1:9] <- 1}
if(substr(zone$Codi[i], 1,2) == "SI"){zone[i,1:9] <- 1}
if(substr(zone$Codi[i], 1,2) == "AF"){zone[i,1:9] <- 0}
if(substr(zone$Codi[i], 1,2) == "BE"){zone[i,1:9] <- 1}
if(substr(zone$Codi[i], 1,2) == "GR"){zone[i,1:9] <- 0}
}
zone <- zone[,-10]
# Year
yrs2 <- c(0, 1, 2, 3, 4, 5, 6, 7, 8) # To make it as a continuous variable, otherwise it doesnt work
year <- matrix(NA,nrow = max.sites, ncol = nyrs)
colnames(year) <- yrs
for (i in 1:nyrs){
year[ ,which(colnames(year) %in% yrs[i])] <- rep(yrs2[i], max.sites)
}
# Observer
# Format
obs <- matrix(NA, nrow = max.sites, ncol = nyrs)
rownames(obs) <- all.sites
colnames(obs) <- yrs
# Add observers for fields with counts > 0
for (i in 1:nrow(sp)){
obs[which(rownames(obs) %in% sp$transectID[i]), which(colnames(obs) %in% sp$Year[i])] <- sp$Observer[i]
}
# Add observers for fields with absences (0)
for (i in 1:nrow(absent)){
obs[which(rownames(obs) %in% absent$transectID[i]), which(colnames(obs) %in% absent$Year[i])] <- absent$Observer[i]
}
# ---- Specify data in JAGS format ----
# Distance class and ind
nind <- nrow(sp)
dclass <- sp$Banda
m  # Counts per year and site
# Co-variates
zon <- as.vector(zone[,1])
year1 <- NULL
for (i in 1:nyrs){
year1 <- c(year1,year[1:length(all.sites),i])}
sapply(obs, numeric)
apply(obs,1,as.numeric)
obs
ob <- as.numeric(factor(obs)) # JAGS doesn't accept categorical variables
ob
ob <- matrix(as.numeric(factor(obs)), nrow = max.sites, ncol = nyrs) # JAGS doesn't accept categorical variables
ob
obs
ob
obs
year
nyrs
# Get one long vector for each site-year combination of each dclass observation
###RS: Fixed index to map dclass onto site-year combinations
# For the index, create a vector of ylong where NA are 0 (because I need the same length)
yLong <- unlist(as.data.frame(m), use.names = F)
yLong_index <- yLong
yLong_index[which(is.na(yLong_index))] <- 0
m
yLong
m
sp
m
for (j in 1:max.sites){
for (t in 1:nyrs){
site.dclass <- c(site.dclass,rep(j, m[j,t]))
year.dclass <- c(year.dclass,rep(t, m[j,t]))
} }
site.dclass <- year.dclass <- NULL
for (j in 1:max.sites){
for (t in 1:nyrs){
site.dclass <- c(site.dclass, rep(j, m[j,t]))
year.dclass <- c(year.dclass, rep(t, m[j,t]))
} }
m
max.sites
nyrs
m_index <- m
m_index[which(is.na(m_index))] <- 0
m_index
site.dclass <- year.dclass <- NULL
for (j in 1:max.sites){
for (t in 1:nyrs){
site.dclass <- c(site.dclass, rep(j, m[j,t]))
year.dclass <- c(year.dclass, rep(t, m[j,t]))
} }
for (j in 1:max.sites){
for (t in 1:nyrs){
site.dclass <- c(site.dclass, rep(j, m_index[j,t]))
year.dclass <- c(year.dclass, rep(t, m_index[j,t]))
} }
site.dclass
sp
count
sp
m
site.dclass
dclass
sp$Banda
sp
m_index
site.dclass
rep(j, m_index[j,t])
j = 3
rep(j, m_index[j,t])
j = 4
rep(j, m_index[j,t])
site.dclass <- year.dclass <- NULL
site.dclass
j = 1
t = 1
max.sites
nyrs
site.dclass <- c(site.dclass, rep(j, m_index[j,t])
site.dclass <- c(site.dclass, rep(j, m_index[j,t]))
site.dclass <- c(site.dclass, rep(j, m_index[j,t]))
site.dclass
site.dclass <- year.dclass <- NULL
for (t in 1:nyrs){
for (j in 1:max.sites){
site.dclass <- c(site.dclass, rep(j, m_index[j,t]))
#year.dclass <- c(year.dclass, rep(t, m_index[j,t]))
} }
site.dclass
m
m_index
sp$Banda
sp
site.dclass
site.dclass
m_index
site.dclass
year.dclass
for (t in 1:nyrs){ # sites has to be nested on years because dclass first indexes the sites on the same year
for (j in 1:max.sites){
site.dclass <- c(site.dclass, rep(j, m_index[j,t]))
year.dclass <- c(year.dclass, rep(t, m_index[j,t]))
} }
year.dclass
