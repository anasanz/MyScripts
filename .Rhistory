sig.s<- 0.25					# standard deviation of species-level random effect on intercept of sigma
beta.s<- -0.2					# fixed effect of observation covariate on sigma
###look at distribution of sigma intercepts
hist(exp(rnorm(1000, mu.s, sig.s)))
##detection prob at farthest distance interval for largest sigma
g(10,6)
############################################################################################################
###abundance component, with one covariate (random species level random effect)
#Intercept
mu.lam.alpha<-log(1.5)				# mean of species-level random effect on intercept of log(expected abundance)
sig.lam.alpha<-1				# SD of species-level random effect on intercept of log(expected abundance)
mu.b1<-0					# mean of species-level random effect on coefficient of log(expected abundance)
sig.b1<-0.5					# SD of species-level random effect on coefficient of log(expected abundance)
###########################################################################################################
### begin iterations ######################################################################################
niter<-100					# number of iterations
iter<-1						# starting iteration
while(iter<=niter){
print (iter)
#####simulate site-specific binary covariate and species and site specific detection parameter sigma
obscov <- rbinom(nSites, 1, 0.6)			# observation covariate
s.alpha <- rnorm(n.spec, mu.s, sig.s)		# detection intercept
###makes a species by site matrix for Scale parameter of half-normal detection function
sigma <- exp(matrix(s.alpha, nrow=n.spec, ncol=nSites) +
matrix(beta.s*obscov, nrow=n.spec, ncol=nSites, byrow=T) )
##### Simulate abundance across sites
##sp-specific intercept
lam.alpha <- rnorm(n.spec, mu.lam.alpha, sig.lam.alpha)
##sp-specific coefficient for covariate
b1<-rnorm(n.spec, mu.b1, sig.b1)
##spatial covariate
Ncov<-rnorm(nSites, 0, 1)
##Poisson mean (log(expected abundance))
lambda<-exp(matrix(lam.alpha, nrow=n.spec, ncol=nSites) +
matrix(rep(b1,each=nSites )*rep(Ncov, times=n.spec), nrow=n.spec, ncol=nSites, byrow=T) )
# Adds a random effect per species + a covariate that has a random effect in species (same for each, b1)
# and that covariate is different per site (but the same for all species)
##abundance
N <- matrix(rpois(n.spec*nSites, as.vector(lambda)), nrow=n.spec, ncol=nSites )
### total number of individuals in all sampled transects for each species
N.tot<-apply(N,1,sum)
#####simulate continuous distance data
# y=number of individuals detected in each distance interval
y <- array(0, c(n.spec, nSites, length(dist.breaks)-1))
for (i in 1:n.spec){
for(j in 1:nSites) {
if(N[i,j] == 0)
next
# Distance from observer to the individual
d <- runif(N[i,j], 0, strip.width) 		# uniform distribution of animals
p <- g(x=d, sig=sigma[i,j])   		# Detection probability
seen <- rbinom(N[i,j], 1, p) 		# Which individuals are detected
if(all(seen == 0))
next
d1 <- d[seen==1] 				# The distance data for seen individuals
counts <- table(cut(d1, dist.breaks, include.lowest=TRUE))
y[i,j,] <- counts 				# The number of detections in each distance interval
}
}
y.sum<-apply(y,1:2, sum)
##skip data sets with unobserved species or species with abundance=0
if (any(apply(y.sum,1,sum)==0) | any(N.tot==0) ) next
##### if data passes both criteria, continue on ################################################
##### convert data to JAGS format
nind<-sum(y)
spp<-sst<-dclass<-NULL
for (i in 1:n.spec){
for(j in 1:nSites){
for (k in 1:nG){
if (y[i,j,k]==0) next
spp<-c(spp, rep(i, y[i,j,k]))		#species index
sst<-c(sst, rep(j, y[i,j,k]))		#site index
dclass<-c(dclass, rep(k, y[i,j,k]))	#distance category index
}}}
###write data to .R file for post-processing
dat<-list(N=N, y=y, b1=b1, lam.alpha=lam.alpha, s.alpha=s.alpha, obscov=obscov, Ncov=Ncov)
dput(dat, paste('Data_spec',n.spec,'_', iter, '.R', sep=''))
################## run JAGS model ##############################################################
### compile data for JAGS model
data1<-list(spec=n.spec, nG=nG, db=dist.breaks, v=int.w,
pi=rep(1/(length(dist.breaks)-1), length(dist.breaks)-1), nsites=nSites, v1=Ncov,
y=t(y.sum), nind=nind, dclass=dclass, species=spp, site=sst, OBSVAR=obscov)
#xg=dist.breaks[-1]-0.5
### create initial values, the ones for N are important!
N.in<-t(y.sum)+1
inits1<-function(){list(N=N.in, mu_a=runif(1,0,1), tau_a=runif(1,0,1), mu_b1=runif(1), tau_b1=runif(1),
mu_s = runif(1, 0.5, 1.5), sig_s=runif(1) )}
### set parameters to monitor
params1<-c('mu_s', 'sig_s', 'mu_a', 'sig_a', 'mu_b1', 'sig_b1','Bp.N',
'Bp.Obs', 'beta1','alpha', 'Nspec', 'asig', 'bsig')
### read in JAGS model file
### NOTE: JAGS model code below!!
modelFile1='Community_DS_Simulations.txt'
### compile and adapt JAGS model, then generate posterior samples (adjust n.iter for n=5 to 20000)
mod <- jags.model(modelFile1, data1, inits1, n.chain=1, n.adapt=500)
out <- coda.samples(mod, params1, n.iter=8000, thin=8)
### save model output for post-processing
dput(out,  paste('Output_spec',n.spec,'_', iter, '.R', sep=''))
iter<-iter+1
} ##end iteration loop
###################################################################################################
####################################################################################################
############### JAGS model code ###################################################
#### this code needs to be written to a .txt file called 'Community_DS_Simulations.txt'
#### if given a different name, adjust accordingly in the code above
setwd("C:/Users/Ana/Documents/PhD/Second chapter/Data/Model")
cat("
model{
###species specific parameters
for (s in 1:spec){
asig[s]~dnorm(mu_s, tau_s) # alpha for sigma (dif detection per species)
beta1[s]~dnorm(mu_b1,tau_b1) # Beta for covariate for detection (sigma)
alpha[s]~dnorm(mu_a,tau_a) # alpha for lambda (dif baseline abundance per species?)
}
###hyperparameters of species level random effects
mu_s~dnorm(0,0.01)
tau_s<-1/(sig_s*sig_s)
sig_s~dunif(0,500)
mu_a~dnorm(0,0.01)
sig_a<-1/sqrt(tau_a)
tau_a~dgamma(0.1,0.1)
mu_b1~dnorm(0,0.01)
sig_b1<-1/sqrt(tau_b1)
tau_b1~dgamma(0.1,0.1)
### fixed observation coefficient
bsig~dnorm(0,0.01)
for (s in 1:spec){
for (j in 1:nsites){
sigma[s,j]<-exp(asig[s] + bsig*OBSVAR[j])
f.0[s,j] <- 2 * dnorm(0,0, 1/sigma[s,j]^2)
for(k in 1:nG){
### approximation to integral of distance function over distance categories
### by using mid-point of distance categories
### works for point surveys (with appropriate values for pi[k])
### if used, delete line above starting with 'f.0'
### p[s,j,k]<- exp( -xg[k]*xg[k]/(2*sigma[s,j]*sigma[s,j]) ) #
### fc[s,j,k]<- p[s,j,k]*pi[k]
### fsc[s,j,k]<- fc[s,j,k]/pcap[s,j]
### fct[s,j,k]<-fsc[s,j,k]/sum(fsc[s,j,1:nG])
### actual integral over distance categories
up[s,j,k]<-pnorm(db[k+1], 0, 1/sigma[s,j]^2)
low[s,j,k]<-pnorm(db[k], 0, 1/sigma[s,j]^2)
p[s,j,k]<- 2 * ( up[s,j,k] - low[s,j,k])
f[s,j,k]<- p[s,j,k]/f.0[s,j]/v
fc[s,j,k]<- f[s,j,k] * pi[k]
fct[s,j,k]<-fc[s,j,k]/sum(fc[s,j,1:nG])
}
pcap[s,j]<-sum(fc[s,j,1:nG])    # overall detection probability
lambda[j,s]<- exp(alpha[s] + beta1[s]*v1[j])
### for a flexible number of covariates, use:
### lambda[j,s]<- exp(alpha[s] + inprod(beta1[s,]*v1[j,]))
### see seabird application for an example
y[j,s]~ dbin(pcap[s,j],N[j,s])
N[j,s]~dpois(lambda[j,s])
###create replicate abundances for Bayesian p-value on abundance component
Nnew[j,s]~dpois(lambda[j,s])
### residuals for 'observed' and new abundances
FT1[j,s]<-pow(sqrt(N[j,s])-sqrt(lambda[j,s]),2)
FT1new[j,s]<-pow(sqrt(Nnew[j,s])-sqrt(lambda[j,s]),2)
}
T1p[s]<-sum(FT1[1:nsites,s])
T1newp[s]<-sum(FT1new[1:nsites,s])
}
# Bayesian p-value
Bp.N<-sum(T1newp[1:spec])>sum(T1p[1:spec])
for(i in 1:nind){
dclass[i] ~ dcat(fct[species[i],site[i],1:nG])
###generate new observations, calculate residuals for Bayesian p-value on detection component
dclassnew[i] ~ dcat(fct[species[i],site[i],1:nG])
Tobsp[i]<- pow(1- sqrt(fct[species[i],site[i],dclass[i]]),2)
Tobspnew[i]<- pow(1- sqrt(fct[species[i],site[i],dclassnew[i]]),2)
}
Bp.Obs<-sum(Tobspnew[1:nind])>sum(Tobsp[1:nind])
###monitor total abundance
for (i in 1:spec){
Nspec[i]<-sum(N[1:nsites,i])
}
}",fill=TRUE, file = "Community_DS_Simulations.txt")
setwd("C:/Users/ana.sanz/Documents/PhD/Second chapter/Data/Model")
##########################################################################################################
#### Sollmann, R., Gardner, B., Williams, K.A., Gilbert, A.T. and Veit, R.R. A hierarchical distance #####
#### sampling model to estimate abundance and covariate associations of species and communities	     #####
####												     #####
#### Appendix S2: R and JAGS code to implement simulation study and case study			     #####
##########################################################################################################
##########################################################################################################
#### Simulation study:										     #####
#### simulate abundance for a community of species, then generate distance sampling data from that   #####
#### and analyze with data-generating model; summarize results across iterations                     #####
##########################################################################################################
library(rjags)
set.seed(2013)
#number of species in the community
n.spec<-30 # 5, 15, 30
# Half-normal detection function
g <- function(x, sig) exp(-x^2/(2*sig^2))
nSites <- 50					# number of line transect surveys
strip.width <- 10 				# strip half-width, w (in this example only one side of the line transect is surveyed)
int.w<-1					# width of distance categories (v)
dist.breaks <- seq(0, strip.width, by=int.w)	# distance break points
nG <- length(dist.breaks)-1			# number of distance categories
############################################################################################################
### detection component: sigma with one covariate (fixed effect)
mu.s<-log(2.5)					# mean of species-level random effect on intercept of sigma
sig.s<- 0.25					# standard deviation of species-level random effect on intercept of sigma
beta.s<- -0.2					# fixed effect of observation covariate on sigma
###look at distribution of sigma intercepts
hist(exp(rnorm(1000, mu.s, sig.s)))
##detection prob at farthest distance interval for largest sigma
g(10,6)
############################################################################################################
###abundance component, with one covariate (random species level random effect)
#Intercept
mu.lam.alpha<-log(1.5)				# mean of species-level random effect on intercept of log(expected abundance)
sig.lam.alpha<-1				# SD of species-level random effect on intercept of log(expected abundance)
mu.b1<-0					# mean of species-level random effect on coefficient of log(expected abundance)
sig.b1<-0.5					# SD of species-level random effect on coefficient of log(expected abundance)
###########################################################################################################
### begin iterations ######################################################################################
niter<-100					# number of iterations
iter<-1						# starting iteration
while(iter<=niter){
print (iter)
#####simulate site-specific binary covariate and species and site specific detection parameter sigma
obscov <- rbinom(nSites, 1, 0.6)			# observation covariate
s.alpha <- rnorm(n.spec, mu.s, sig.s)		# detection intercept
###makes a species by site matrix for Scale parameter of half-normal detection function
sigma <- exp(matrix(s.alpha, nrow=n.spec, ncol=nSites) +
matrix(beta.s*obscov, nrow=n.spec, ncol=nSites, byrow=T) )
##### Simulate abundance across sites
##sp-specific intercept
lam.alpha <- rnorm(n.spec, mu.lam.alpha, sig.lam.alpha)
##sp-specific coefficient for covariate
b1<-rnorm(n.spec, mu.b1, sig.b1)
##spatial covariate
Ncov<-rnorm(nSites, 0, 1)
##Poisson mean (log(expected abundance))
lambda<-exp(matrix(lam.alpha, nrow=n.spec, ncol=nSites) +
matrix(rep(b1,each=nSites )*rep(Ncov, times=n.spec), nrow=n.spec, ncol=nSites, byrow=T) )
# Adds a random effect per species + a covariate that has a random effect in species (same for each, b1)
# and that covariate is different per site (but the same for all species)
##abundance
N <- matrix(rpois(n.spec*nSites, as.vector(lambda)), nrow=n.spec, ncol=nSites )
### total number of individuals in all sampled transects for each species
N.tot<-apply(N,1,sum)
#####simulate continuous distance data
# y=number of individuals detected in each distance interval
y <- array(0, c(n.spec, nSites, length(dist.breaks)-1))
for (i in 1:n.spec){
for(j in 1:nSites) {
if(N[i,j] == 0)
next
# Distance from observer to the individual
d <- runif(N[i,j], 0, strip.width) 		# uniform distribution of animals
p <- g(x=d, sig=sigma[i,j])   		# Detection probability
seen <- rbinom(N[i,j], 1, p) 		# Which individuals are detected
if(all(seen == 0))
next
d1 <- d[seen==1] 				# The distance data for seen individuals
counts <- table(cut(d1, dist.breaks, include.lowest=TRUE))
y[i,j,] <- counts 				# The number of detections in each distance interval
}
}
y.sum<-apply(y,1:2, sum)
##skip data sets with unobserved species or species with abundance=0
if (any(apply(y.sum,1,sum)==0) | any(N.tot==0) ) next
##### if data passes both criteria, continue on ################################################
##### convert data to JAGS format
nind<-sum(y)
spp<-sst<-dclass<-NULL
for (i in 1:n.spec){
for(j in 1:nSites){
for (k in 1:nG){
if (y[i,j,k]==0) next
spp<-c(spp, rep(i, y[i,j,k]))		#species index
sst<-c(sst, rep(j, y[i,j,k]))		#site index
dclass<-c(dclass, rep(k, y[i,j,k]))	#distance category index
}}}
###write data to .R file for post-processing
dat<-list(N=N, y=y, b1=b1, lam.alpha=lam.alpha, s.alpha=s.alpha, obscov=obscov, Ncov=Ncov)
dput(dat, paste('Data_spec',n.spec,'_', iter, '.R', sep=''))
################## run JAGS model ##############################################################
### compile data for JAGS model
data1<-list(spec=n.spec, nG=nG, db=dist.breaks, v=int.w,
pi=rep(1/(length(dist.breaks)-1), length(dist.breaks)-1), nsites=nSites, v1=Ncov,
y=t(y.sum), nind=nind, dclass=dclass, species=spp, site=sst, OBSVAR=obscov)
#xg=dist.breaks[-1]-0.5
### create initial values, the ones for N are important!
N.in<-t(y.sum)+1
inits1<-function(){list(N=N.in, mu_a=runif(1,0,1), tau_a=runif(1,0,1), mu_b1=runif(1), tau_b1=runif(1),
mu_s = runif(1, 0.5, 1.5), sig_s=runif(1) )}
### set parameters to monitor
params1<-c('mu_s', 'sig_s', 'mu_a', 'sig_a', 'mu_b1', 'sig_b1','Bp.N',
'Bp.Obs', 'beta1','alpha', 'Nspec', 'asig', 'bsig')
### read in JAGS model file
### NOTE: JAGS model code below!!
modelFile1='Community_DS_Simulations.txt'
### compile and adapt JAGS model, then generate posterior samples (adjust n.iter for n=5 to 20000)
mod <- jags.model(modelFile1, data1, inits1, n.chain=1, n.adapt=500)
out <- coda.samples(mod, params1, n.iter=8000, thin=8)
### save model output for post-processing
dput(out,  paste('Output_spec',n.spec,'_', iter, '.R', sep=''))
iter<-iter+1
} ##end iteration loop
##########################################################################################################
#### Sollmann, R., Gardner, B., Williams, K.A., Gilbert, A.T. and Veit, R.R. A hierarchical distance #####
#### sampling model to estimate abundance and covariate associations of species and communities	     #####
####												     #####
#### Appendix S2: R and JAGS code to implement simulation study and case study			     #####
##########################################################################################################
##########################################################################################################
#### Simulation study:										     #####
#### simulate abundance for a community of species, then generate distance sampling data from that   #####
#### and analyze with data-generating model; summarize results across iterations                     #####
##########################################################################################################
library(rjags)
set.seed(2013)
#number of species in the community
n.spec<-30 # 5, 15, 30
# Half-normal detection function
g <- function(x, sig) exp(-x^2/(2*sig^2))
nSites <- 50					# number of line transect surveys
strip.width <- 10 				# strip half-width, w (in this example only one side of the line transect is surveyed)
int.w<-1					# width of distance categories (v)
dist.breaks <- seq(0, strip.width, by=int.w)	# distance break points
nG <- length(dist.breaks)-1			# number of distance categories
############################################################################################################
### detection component: sigma with one covariate (fixed effect)
mu.s<-log(2.5)					# mean of species-level random effect on intercept of sigma
sig.s<- 0.25					# standard deviation of species-level random effect on intercept of sigma
beta.s<- -0.2					# fixed effect of observation covariate on sigma
###look at distribution of sigma intercepts
hist(exp(rnorm(1000, mu.s, sig.s)))
##detection prob at farthest distance interval for largest sigma
g(10,6)
############################################################################################################
###abundance component, with one covariate (random species level random effect)
#Intercept
mu.lam.alpha<-log(1.5)				# mean of species-level random effect on intercept of log(expected abundance)
sig.lam.alpha<-1				# SD of species-level random effect on intercept of log(expected abundance)
mu.b1<-0					# mean of species-level random effect on coefficient of log(expected abundance)
sig.b1<-0.5					# SD of species-level random effect on coefficient of log(expected abundance)
###########################################################################################################
### begin iterations ######################################################################################
#niter<-100					# number of iterations
niter <- 2
iter<-1						# starting iteration
while(iter<=niter){
print (iter)
#####simulate site-specific binary covariate and species and site specific detection parameter sigma
obscov <- rbinom(nSites, 1, 0.6)			# observation covariate
s.alpha <- rnorm(n.spec, mu.s, sig.s)		# detection intercept
###makes a species by site matrix for Scale parameter of half-normal detection function
sigma <- exp(matrix(s.alpha, nrow=n.spec, ncol=nSites) +
matrix(beta.s*obscov, nrow=n.spec, ncol=nSites, byrow=T) )
##### Simulate abundance across sites
##sp-specific intercept
lam.alpha <- rnorm(n.spec, mu.lam.alpha, sig.lam.alpha)
##sp-specific coefficient for covariate
b1<-rnorm(n.spec, mu.b1, sig.b1)
##spatial covariate
Ncov<-rnorm(nSites, 0, 1)
##Poisson mean (log(expected abundance))
lambda<-exp(matrix(lam.alpha, nrow=n.spec, ncol=nSites) +
matrix(rep(b1,each=nSites )*rep(Ncov, times=n.spec), nrow=n.spec, ncol=nSites, byrow=T) )
# Adds a random effect per species + a covariate that has a random effect in species (same for each, b1)
# and that covariate is different per site (but the same for all species)
##abundance
N <- matrix(rpois(n.spec*nSites, as.vector(lambda)), nrow=n.spec, ncol=nSites )
### total number of individuals in all sampled transects for each species
N.tot<-apply(N,1,sum)
#####simulate continuous distance data
# y=number of individuals detected in each distance interval
y <- array(0, c(n.spec, nSites, length(dist.breaks)-1))
for (i in 1:n.spec){
for(j in 1:nSites) {
if(N[i,j] == 0)
next
# Distance from observer to the individual
d <- runif(N[i,j], 0, strip.width) 		# uniform distribution of animals
p <- g(x=d, sig=sigma[i,j])   		# Detection probability
seen <- rbinom(N[i,j], 1, p) 		# Which individuals are detected
if(all(seen == 0))
next
d1 <- d[seen==1] 				# The distance data for seen individuals
counts <- table(cut(d1, dist.breaks, include.lowest=TRUE))
y[i,j,] <- counts 				# The number of detections in each distance interval
}
}
y.sum<-apply(y,1:2, sum)
##skip data sets with unobserved species or species with abundance=0
if (any(apply(y.sum,1,sum)==0) | any(N.tot==0) ) next
##### if data passes both criteria, continue on ################################################
##### convert data to JAGS format
nind<-sum(y)
spp<-sst<-dclass<-NULL
for (i in 1:n.spec){
for(j in 1:nSites){
for (k in 1:nG){
if (y[i,j,k]==0) next
spp<-c(spp, rep(i, y[i,j,k]))		#species index
sst<-c(sst, rep(j, y[i,j,k]))		#site index
dclass<-c(dclass, rep(k, y[i,j,k]))	#distance category index
}}}
###write data to .R file for post-processing
dat<-list(N=N, y=y, b1=b1, lam.alpha=lam.alpha, s.alpha=s.alpha, obscov=obscov, Ncov=Ncov)
dput(dat, paste('Data_spec',n.spec,'_', iter, '.R', sep=''))
################## run JAGS model ##############################################################
### compile data for JAGS model
data1<-list(spec=n.spec, nG=nG, db=dist.breaks, v=int.w,
pi=rep(1/(length(dist.breaks)-1), length(dist.breaks)-1), nsites=nSites, v1=Ncov,
y=t(y.sum), nind=nind, dclass=dclass, species=spp, site=sst, OBSVAR=obscov)
#xg=dist.breaks[-1]-0.5
### create initial values, the ones for N are important!
N.in<-t(y.sum)+1
inits1<-function(){list(N=N.in, mu_a=runif(1,0,1), tau_a=runif(1,0,1), mu_b1=runif(1), tau_b1=runif(1),
mu_s = runif(1, 0.5, 1.5), sig_s=runif(1) )}
### set parameters to monitor
params1<-c('mu_s', 'sig_s', 'mu_a', 'sig_a', 'mu_b1', 'sig_b1','Bp.N',
'Bp.Obs', 'beta1','alpha', 'Nspec', 'asig', 'bsig')
### read in JAGS model file
### NOTE: JAGS model code below!!
modelFile1='Community_DS_Simulations.txt'
### compile and adapt JAGS model, then generate posterior samples (adjust n.iter for n=5 to 20000)
mod <- jags.model(modelFile1, data1, inits1, n.chain=1, n.adapt=500)
out <- coda.samples(mod, params1, n.iter=8000, thin=8)
### save model output for post-processing
dput(out,  paste('Output_spec',n.spec,'_', iter, '.R', sep=''))
iter<-iter+1
} ##end iteration loop
###################################################################################################
####################################################################################################
############### JAGS model code ###################################################
#### this code needs to be written to a .txt file called 'Community_DS_Simulations.txt'
#### if given a different name, adjust accordingly in the code above
setwd("C:/Users/ana.sanz/Documents/PhD/Second chapter/Data/Model")
cat("
model{
###species specific parameters
for (s in 1:spec){
asig[s]~dnorm(mu_s, tau_s) # alpha for sigma (dif detection per species)
beta1[s]~dnorm(mu_b1,tau_b1) # Beta for covariate for detection (sigma)
alpha[s]~dnorm(mu_a,tau_a) # alpha for lambda (dif baseline abundance per species?)
}
###hyperparameters of species level random effects
mu_s~dnorm(0,0.01)
tau_s<-1/(sig_s*sig_s)
sig_s~dunif(0,500)
mu_a~dnorm(0,0.01)
sig_a<-1/sqrt(tau_a)
tau_a~dgamma(0.1,0.1)
mu_b1~dnorm(0,0.01)
sig_b1<-1/sqrt(tau_b1)
tau_b1~dgamma(0.1,0.1)
### fixed observation coefficient
bsig~dnorm(0,0.01)
for (s in 1:spec){
for (j in 1:nsites){
sigma[s,j]<-exp(asig[s] + bsig*OBSVAR[j])
f.0[s,j] <- 2 * dnorm(0,0, 1/sigma[s,j]^2)
for(k in 1:nG){
### approximation to integral of distance function over distance categories
### by using mid-point of distance categories
### works for point surveys (with appropriate values for pi[k])
### if used, delete line above starting with 'f.0'
### p[s,j,k]<- exp( -xg[k]*xg[k]/(2*sigma[s,j]*sigma[s,j]) ) #
### fc[s,j,k]<- p[s,j,k]*pi[k]
### fsc[s,j,k]<- fc[s,j,k]/pcap[s,j]
### fct[s,j,k]<-fsc[s,j,k]/sum(fsc[s,j,1:nG])
### actual integral over distance categories
up[s,j,k]<-pnorm(db[k+1], 0, 1/sigma[s,j]^2)
low[s,j,k]<-pnorm(db[k], 0, 1/sigma[s,j]^2)
p[s,j,k]<- 2 * ( up[s,j,k] - low[s,j,k])
f[s,j,k]<- p[s,j,k]/f.0[s,j]/v
fc[s,j,k]<- f[s,j,k] * pi[k]
fct[s,j,k]<-fc[s,j,k]/sum(fc[s,j,1:nG])
}
pcap[s,j]<-sum(fc[s,j,1:nG])    # overall detection probability
lambda[j,s]<- exp(alpha[s] + beta1[s]*v1[j])
### for a flexible number of covariates, use:
### lambda[j,s]<- exp(alpha[s] + inprod(beta1[s,]*v1[j,]))
### see seabird application for an example
y[j,s]~ dbin(pcap[s,j],N[j,s])
N[j,s]~dpois(lambda[j,s])
###create replicate abundances for Bayesian p-value on abundance component
Nnew[j,s]~dpois(lambda[j,s])
### residuals for 'observed' and new abundances
FT1[j,s]<-pow(sqrt(N[j,s])-sqrt(lambda[j,s]),2)
FT1new[j,s]<-pow(sqrt(Nnew[j,s])-sqrt(lambda[j,s]),2)
}
T1p[s]<-sum(FT1[1:nsites,s])
T1newp[s]<-sum(FT1new[1:nsites,s])
}
# Bayesian p-value
Bp.N<-sum(T1newp[1:spec])>sum(T1p[1:spec])
for(i in 1:nind){
dclass[i] ~ dcat(fct[species[i],site[i],1:nG])
###generate new observations, calculate residuals for Bayesian p-value on detection component
dclassnew[i] ~ dcat(fct[species[i],site[i],1:nG])
Tobsp[i]<- pow(1- sqrt(fct[species[i],site[i],dclass[i]]),2)
Tobspnew[i]<- pow(1- sqrt(fct[species[i],site[i],dclassnew[i]]),2)
}
Bp.Obs<-sum(Tobspnew[1:nind])>sum(Tobsp[1:nind])
###monitor total abundance
for (i in 1:spec){
Nspec[i]<-sum(N[1:nsites,i])
}
}",fill=TRUE, file = "Community_DS_Simulations.txt")
###make tables to hold evals
###this requires reading in one output file before running the iter loop
out<-dget(paste('Output_spec',n.spec,'_', 1, '.R', sep=''))
out
