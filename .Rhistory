class(sp.df.probpos$steppe_index1)
sp.df.effect$steppe_index1 <- as.factor(sp.df.effect$steppe_index1)
sp.df.effect$steppe_index2 <- as.factor(sp.df.effect$steppe_index2)
sp.df.probpos$steppe_index1 <- as.factor(sp.df.probpos$steppe_index1)
sp.df.probpos$steppe_index2 <- as.factor(sp.df.probpos$steppe_index2)
(jColors <-
with(sp.df.probpos,
data.frame(steppe_index1 = unique(steppe_index1),
color = I(col(nlevels(steppe_index1))))))
(jColors <-
with(sp.df.probpos,
data.frame(steppe_index1 = levels(steppe_index1),
color = I(col(nlevels(steppe_index1))))))
levels(steppe_index1)
sp.df.probpos
pal <- colorRampPalette(c("green", "red"))
pal(5)
sp.df.probpos
# Model 15.1.1
library(rjags)
library(jagsUI)
library(dplyr)
# Load species analyzed in the model
setwd("D:/PhD/Third chapter/Data")
d <- read.csv("DataDS_ch3_15_19_READY_FIXED.csv")
bad_bp <- c("GACRI", "GATHE", "PADOM", "STSSP") # to remove all species with bad bp except MICAL and MECAL
d <- d[-which(d$Species %in% bad_bp), ]
sp <- as.character(unique(d$Species))
sp <- sort(sp)
nSpecies <- length(sp)
# Load the three chains
load("D:/PhD/Third chapter/Data/model/15.1.1/JagsOutFOR15.1.1a.RData")
outa <- out
load("D:/PhD/Third chapter/Data/model/15.1.1/JagsOutFOR15.1.1b.RData")
outb <- out
load("D:/PhD/Third chapter/Data/model/15.1.1/JagsOutFOR15.1.1c.RData")
outc <- out
class(outc)
out.list<- list()
out.list[[1]] <- as.mcmc(outa$samples[[1]])
out.list[[2]] <- as.mcmc(outb$samples[[1]])
out.list[[3]] <- as.mcmc(outc$samples[[1]])
out.list <- as.mcmc.list(out.list)
source("D:/PhD/MyScripts/Ch. 2-3/Ch. 3/Data/ProcessCodaOutput.R")
out <- ProcessCodaOutput(out.list)
outall <- out$sims.list # 3 chains together
df.outall <- as.data.frame(outall)
# Probability of positive effect
sp.df.probpos <- data.frame(sp = sp, b.a1 = NA, b.a2 = NA, b.a3 = NA)
coeff <- c("b.a1", "b.a2", "b.a3")
names <- c("b.SG", "b.AES", "b.GREEN")
total.samples <- nrow(df.outall)
for (c in 1:length(coeff)){
variab <- df.outall[ ,grep(coeff[c], colnames(df.outall))]
for (i in 1:nSpecies){
sp.variable <- variab[,colnames(variab)[i]]
positive <- sp.variable[sp.variable > 0] # Probability of positive effect: Using the posterior samples from the management parameters: % of all posterior samples > 0
prob_positive <- (length(positive)/total.samples)*100
sp.df.probpos[i,coeff[c]] <- prob_positive
} }
# Effect size
sp.df.effect <- data.frame(sp = sp, b.a1 = NA, b.a2 = NA, b.a3 = NA)
for (c in 1:length(coeff)){
v1 <- data.frame(out$mean[names(out$mean) %in% coeff[c]])
sp.df.effect[,coeff[c]] <-  v1
}
# Quitar MIMIG (fuera de criterio!!!)
sp.df.probpos <- sp.df.probpos[-which(sp.df.probpos$sp == "MIMIG"), ]
sp.df.effect <- sp.df.effect[-which(sp.df.effect$sp == "MIMIG"), ]
##################################################################
#####                        Plot                           ######
##################################################################
#â™¥ GRAPH 2D
setwd("D:/PhD/Third chapter/Data/Results")
pdf("2D_prob_effect.pdf")
par(mfrow = c(2,2),
mar = c(1,3,2,1),
oma = c(3,1,2,1))
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ")
abline(v = 75, col = "red", lty = "dashed")
abline(h = 75, col = "red", lty = "dashed")
mtext("Probability of positive effect", line = 1, side = 3)
mtext("AES", line = 3, side = 2, cex = 1)
plot(sp.df.effect$b.a1, sp.df.effect$b.a2, ylim = c(-0.2, 0.6), pch = 19, xlab = " ", ylab = " ")
abline(v = 0, col = "darkgrey", lty = "dashed")
abline(h = 0, col = "darkgrey", lty = "dashed")
mtext("Beta effect size", line = 1, side = 3)
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a3, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ")
abline(v = 75, col = "red", lty = "dashed")
abline(h = 75, col = "red", lty = "dashed")
mtext("GREEN", line = 3, side = 2, cex = 1)
mtext("TFM", line = 3, side = 1, cex = 1)
plot(sp.df.effect$b.a1, sp.df.effect$b.a3, ylim = c(-0.2, 0.6), pch = 19, xlab = " ", ylab = " ")
abline(h = 0, col = "darkgrey", lty = "dashed")
abline(v = 0, col = "darkgrey", lty = "dashed")
mtext("TFM", line = 3, side = 1, cex = 1)
dev.off()
# Colour dots by steppe indexes
setwd("D:/PhD/Third chapter/Data")
mine <- read.csv("mi_index.csv", sep = ";")
colnames(mine)[1] <- "sp"
colnames(mine)[6] <- "steppe_index1"
mine <- mine[1:40,c(1,6)]
setwd("D:/PhD/Third chapter/Data")
fbi <- read.csv("index_fbi_csi.csv", sep = ";")
colnames(fbi)[1] <- "sp"
colnames(fbi)[4] <- "steppe_index2"
fbi <- fbi[1:40,c(1,4)]
index <- left_join(mine,fbi)
sp.df.probpos <- left_join(sp.df.probpos,index)
sp.df.effect <- left_join(sp.df.effect,index)
sp.df.effect
i1 <- pal(5)
sp.df.probpos$steppe_index1[i1]
set.seed(2013)
# Model 14.1 (2 random coefficient crop div.&fsize and sp-site), and add to this an extra random coefficient (a3)
# ---- Data simulation ----
# 30 species
# 5 years (unbalanced number of transects per year)
# Observation model calculated with Half Normal detection function
# Sigma site-year specific
### Random sp intercept
### Random effect in observer (site-year)
# Lambda site-year specific
### Random sp-year intercept (include different baseline abundance per species and also per year)
### 2 areas variables (area 1 sp-specific)
# Detection function: HN
g <- function(x, sig) exp(-x^2/(2*sig^2))
# Number of transects per year (unbalanced)
nSites <- seq(74,106, by = 8)				# number of line transect surveys (DIFFERENT BY YEAR)
max.sites <- max(nSites)            # Maximun number of sites is the last year
total.sites <- sum(nSites)
strip.width <- 500 				# strip half-width, w (in this example only one side of the line transect is surveyed)
dist.breaks <- c(0,25,50,100,200,500)
int.w <- diff(dist.breaks) # width of distance categories (v)
midpt <- (int.w/2) + dist.breaks[-6]
nG <- length(dist.breaks)-1
# Year effect
yrs <- 1:5 # eight years
nyrs <- length(yrs)
# Number of species
nSpecies <- 30
#################################
# ---- Detection component ----
# RANDOM INTERCEPT PER SPECIES
mu.sig.sp <- log(50)					# Mean of species-level random effect on intercept of sigma
sig.sig.sp <- 0.25				# SD of species-level random effect on intercept of sigma
s.alpha <- rnorm(nSpecies, mu.sig.sp, sig.sig.sp)
# Look at distribution of sigma intercepts (to see if I chose reasonable)
hist(exp(rnorm(1000, mu.sig.sp, sig.sig.sp)))
# RANDOM EFFECT IN OBSERVER
obs <- 1:9
nobs <- length(obs)
sig.sig.obs <- 0.25
# Observer effect in sigma
sig.obs <- rnorm(length(obs), 0, sig.sig.obs) # Mean is 0 because is adding noise around the mean
sig.obs
# Observer covariate
ob.id <- matrix(sample(1:9, max.sites*nyrs, replace = TRUE), nrow = max.sites, ncol = nyrs) # Matix with IDs
ob.id
sig.obs[ob.id]
sig.obs
sig.obs[ob.id]
i1[sp.df.probpos$steppe_index1]
i1
sp.df.probpos$steppe_index1
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ")
par(mfrow = c(1,1))
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ")
# Model 15.1.1
library(rjags)
library(jagsUI)
library(dplyr)
# Load species analyzed in the model
setwd("D:/PhD/Third chapter/Data")
d <- read.csv("DataDS_ch3_15_19_READY_FIXED.csv")
bad_bp <- c("GACRI", "GATHE", "PADOM", "STSSP") # to remove all species with bad bp except MICAL and MECAL
d <- d[-which(d$Species %in% bad_bp), ]
sp <- as.character(unique(d$Species))
sp <- sort(sp)
nSpecies <- length(sp)
# Load the three chains
load("D:/PhD/Third chapter/Data/model/15.1.1/JagsOutFOR15.1.1a.RData")
outa <- out
load("D:/PhD/Third chapter/Data/model/15.1.1/JagsOutFOR15.1.1b.RData")
outb <- out
load("D:/PhD/Third chapter/Data/model/15.1.1/JagsOutFOR15.1.1c.RData")
outc <- out
class(outc)
out.list<- list()
out.list[[1]] <- as.mcmc(outa$samples[[1]])
out.list[[2]] <- as.mcmc(outb$samples[[1]])
out.list[[3]] <- as.mcmc(outc$samples[[1]])
out.list <- as.mcmc.list(out.list)
source("D:/PhD/MyScripts/Ch. 2-3/Ch. 3/Data/ProcessCodaOutput.R")
out <- ProcessCodaOutput(out.list)
outall <- out$sims.list # 3 chains together
df.outall <- as.data.frame(outall)
# Probability of positive effect
sp.df.probpos <- data.frame(sp = sp, b.a1 = NA, b.a2 = NA, b.a3 = NA)
coeff <- c("b.a1", "b.a2", "b.a3")
names <- c("b.SG", "b.AES", "b.GREEN")
total.samples <- nrow(df.outall)
for (c in 1:length(coeff)){
variab <- df.outall[ ,grep(coeff[c], colnames(df.outall))]
for (i in 1:nSpecies){
sp.variable <- variab[,colnames(variab)[i]]
positive <- sp.variable[sp.variable > 0] # Probability of positive effect: Using the posterior samples from the management parameters: % of all posterior samples > 0
prob_positive <- (length(positive)/total.samples)*100
sp.df.probpos[i,coeff[c]] <- prob_positive
} }
# Effect size
sp.df.effect <- data.frame(sp = sp, b.a1 = NA, b.a2 = NA, b.a3 = NA)
for (c in 1:length(coeff)){
v1 <- data.frame(out$mean[names(out$mean) %in% coeff[c]])
sp.df.effect[,coeff[c]] <-  v1
}
# Quitar MIMIG (fuera de criterio!!!)
sp.df.probpos <- sp.df.probpos[-which(sp.df.probpos$sp == "MIMIG"), ]
sp.df.effect <- sp.df.effect[-which(sp.df.effect$sp == "MIMIG"), ]
# Colour dots by steppe indexes
setwd("D:/PhD/Third chapter/Data")
mine <- read.csv("mi_index.csv", sep = ";")
colnames(mine)[1] <- "sp"
colnames(mine)[6] <- "steppe_index1"
mine <- mine[1:40,c(1,6)]
setwd("D:/PhD/Third chapter/Data")
fbi <- read.csv("index_fbi_csi.csv", sep = ";")
colnames(fbi)[1] <- "sp"
colnames(fbi)[4] <- "steppe_index2"
fbi <- fbi[1:40,c(1,4)]
index <- left_join(mine,fbi)
sp.df.probpos <- left_join(sp.df.probpos,index)
sp.df.effect <- left_join(sp.df.effect,index)
pal <- colorRampPalette(c("green", "red"))
i1 <- pal(5)
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col = i1[sp.df.probpos$steppe_index1])
i1[sp.df.probpos$steppe_index1]
sp.df.probpos
i2 <- pal(3)
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col = i2[sp.df.probpos$steppe_index1])
i2[sp.df.probpos$steppe_index1]
pal <- colorRampPalette(c("yellow", "red"))
i1 <- pal(5)
i2 <- pal(3)
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col = i2[sp.df.probpos$steppe_index1])
pal <- colorRampPalette(c("orange", "red"))
i1 <- pal(5)
i2 <- pal(3)
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col = i2[sp.df.probpos$steppe_index1])
pal <- colorRampPalette(c("blue", "red"))
i2 <- pal(3)
i1 <- pal(5)
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col = i2[sp.df.probpos$steppe_index1])
pal <- colorRampPalette(c("yellow", "red"))
i1 <- pal(5)
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col = i2[sp.df.probpos$steppe_index1])
i2 <- pal(3)
pal <- colorRampPalette(c("yellow", "red"))
i1 <- pal(5)
i2 <- pal(3)
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col = i2[sp.df.probpos$steppe_index1])
i2[sp.df.probpos$steppe_index1]
i2
col(i2)
plot(col(i2))
plot(1)
points(c(1,1),c(1.2,1.2),c(1.3,1.3), col = i2
points(c(1,1),c(1.2,1.2),c(1.3,1.3), col = i2
)
points(c(1,1),c(1.2,1.2),c(1.3,1.3), col = i2)
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col=c("green","orange","red")[sp.df.probpos$steppe_index1])
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col = i2[sp.df.probpos$steppe_index1])
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col=c("green","orange","red")[sp.df.probpos$steppe_index1])
sp.df.probpos
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col=c("green","orange","red")[sp.df.probpos$steppe_index2])
sp.df.probpos$steppe_index2
c("green","orange","red")[sp.df.probpos$steppe_index2]
sp.df.probpos$steppe_index1 <- sp.df.probpos$steppe_index1 + 1
sp.df.probpos$steppe_index2 <- sp.df.probpos$steppe_index2 + 1
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col=c("green","orange","red")[sp.df.probpos$steppe_index2])
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col = i2[sp.df.probpos$steppe_index1])
sp.df.probpos
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col=c("green","orange","red")[sp.df.probpos$steppe_index2])
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col=c("green","orange","red")[sp.df.probpos$steppe_index1])
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col=colorRamps::green2red(5)[sp.df.probpos$steppe_index1])
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col=colorRamps::green2red(3)[sp.df.probpos$steppe_index2])
green2red(3)
colorRamps::green2red(3)
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col=adjustcolor("red", alpha.f = sp.df.probpos$steppe_index1))
alp <- c(0.2,0.4,0.6,1)
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col=adjustcolor("red", alpha.f = alp[sp.df.probpos$steppe_index1])
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col=adjustcolor("red", alpha.f = alp[sp.df.probpos$steppe_index1]))
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col=adjustcolor("red", alpha.f = alp[sp.df.probpos$steppe_index1]))
alp
alp[sp.df.probpos$steppe_index1]
sp.df.probpos
sp.df.probpos$steppe_index1]
sp.df.probpos$steppe_index1
sp.df.probpos$steppe_index1[sp.df.probpos$steppe_index1 == 5] <- 4
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col=adjustcolor("red", alpha.f = alp[sp.df.probpos$steppe_index1]))
sp.df.probpos$steppe_index2
sp.df.probpos$steppe_index1
# Trial 2
palette_i1 <- c("green","orange","red")
unique(sp.df.probpos$steppe_index2)
unique(sp.df.probpos$steppe_index1)
palette_i1 <- c("gold", "orange", "red", "brown")
palette_i2 <- c("green","orange","red")
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col=palette_i1[sp.df.probpos$steppe_index1])
palette_i1 <- c("gold", "darkorange2", "red", "brown")
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col=palette_i1[sp.df.probpos$steppe_index1])
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col=palette_i2[sp.df.probpos$steppe_index2])
palette_i1 <- c("green", "orange", "red", "brown")
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col=palette_i1[sp.df.probpos$steppe_index1])
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col=palette_i1[sp.df.probpos$steppe_index1])
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col=palette_i2[sp.df.probpos$steppe_index2])
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col=palette_i1[sp.df.probpos$steppe_index1])
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col=palette_i2[sp.df.probpos$steppe_index2])
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col=palette_i1[sp.df.probpos$steppe_index1])
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col=palette_i1[sp.df.probpos$steppe_index1])
pdf("2D_prob_effect_colours_i1.pdf")
par(mfrow = c(2,2),
mar = c(1,3,2,1),
oma = c(3,1,2,1))
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col=palette_i1[sp.df.probpos$steppe_index1])
abline(v = 75, col = "black", lty = "dashed")
abline(h = 75, col = "black", lty = "dashed")
mtext("Probability of positive effect", line = 1, side = 3)
mtext("AES", line = 3, side = 2, cex = 1)
plot(sp.df.effect$b.a1, sp.df.effect$b.a2, ylim = c(-0.2, 0.6), pch = 19, xlab = " ", ylab = " ", col=palette_i1[sp.df.probpos$steppe_index1])
abline(v = 0, col = "darkgrey", lty = "dashed")
abline(h = 0, col = "darkgrey", lty = "dashed")
mtext("Beta effect size", line = 1, side = 3)
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a3, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col=palette_i1[sp.df.probpos$steppe_index1])
abline(v = 75, col = "black", lty = "dashed")
abline(h = 75, col = "black", lty = "dashed")
mtext("GREEN", line = 3, side = 2, cex = 1)
mtext("TFM", line = 3, side = 1, cex = 1)
plot(sp.df.effect$b.a1, sp.df.effect$b.a3, ylim = c(-0.2, 0.6), pch = 19, xlab = " ", ylab = " ", col=palette_i1[sp.df.probpos$steppe_index1])
abline(h = 0, col = "darkgrey", lty = "dashed")
abline(v = 0, col = "darkgrey", lty = "dashed")
mtext("TFM", line = 3, side = 1, cex = 1)
dev.off()
setwd("D:/PhD/Third chapter/Data/Results")
pdf("2D_prob_effect_colours_i1.pdf")
par(mfrow = c(2,2),
mar = c(1,3,2,1),
oma = c(3,1,2,1))
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col=palette_i1[sp.df.probpos$steppe_index1])
abline(v = 75, col = "black", lty = "dashed")
abline(h = 75, col = "black", lty = "dashed")
mtext("Probability of positive effect", line = 1, side = 3)
mtext("AES", line = 3, side = 2, cex = 1)
plot(sp.df.effect$b.a1, sp.df.effect$b.a2, ylim = c(-0.2, 0.6), pch = 19, xlab = " ", ylab = " ", col=palette_i1[sp.df.probpos$steppe_index1])
abline(v = 0, col = "darkgrey", lty = "dashed")
abline(h = 0, col = "darkgrey", lty = "dashed")
mtext("Beta effect size", line = 1, side = 3)
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a3, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col=palette_i1[sp.df.probpos$steppe_index1])
abline(v = 75, col = "black", lty = "dashed")
abline(h = 75, col = "black", lty = "dashed")
mtext("GREEN", line = 3, side = 2, cex = 1)
mtext("TFM", line = 3, side = 1, cex = 1)
plot(sp.df.effect$b.a1, sp.df.effect$b.a3, ylim = c(-0.2, 0.6), pch = 19, xlab = " ", ylab = " ", col=palette_i1[sp.df.probpos$steppe_index1])
abline(h = 0, col = "darkgrey", lty = "dashed")
abline(v = 0, col = "darkgrey", lty = "dashed")
mtext("TFM", line = 3, side = 1, cex = 1)
dev.off()
setwd("D:/PhD/Third chapter/Data/Results")
pdf("2D_prob_effect_colours_i2.pdf")
par(mfrow = c(2,2),
mar = c(1,3,2,1),
oma = c(3,1,2,1))
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col=palette_i2[sp.df.probpos$steppe_index2])
abline(v = 75, col = "black", lty = "dashed")
abline(h = 75, col = "black", lty = "dashed")
mtext("Probability of positive effect", line = 1, side = 3)
mtext("AES", line = 3, side = 2, cex = 1)
plot(sp.df.effect$b.a1, sp.df.effect$b.a2, ylim = c(-0.2, 0.6), pch = 19, xlab = " ", ylab = " ", col=palette_i2[sp.df.probpos$steppe_index2])
abline(v = 0, col = "darkgrey", lty = "dashed")
abline(h = 0, col = "darkgrey", lty = "dashed")
mtext("Beta effect size", line = 1, side = 3)
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a3, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col=palette_i2[sp.df.probpos$steppe_index2])
abline(v = 75, col = "black", lty = "dashed")
abline(h = 75, col = "black", lty = "dashed")
mtext("GREEN", line = 3, side = 2, cex = 1)
mtext("TFM", line = 3, side = 1, cex = 1)
plot(sp.df.effect$b.a1, sp.df.effect$b.a3, ylim = c(-0.2, 0.6), pch = 19, xlab = " ", ylab = " ", col=palette_i2[sp.df.probpos$steppe_index2])
abline(h = 0, col = "darkgrey", lty = "dashed")
abline(v = 0, col = "darkgrey", lty = "dashed")
mtext("TFM", line = 3, side = 1, cex = 1)
dev.off()
#â™¥ GRAPH 2D HIGHLIGHT TARGET SPECIES
sp.df.probpos$target <- ifelse(sp.df.probpos$sp %in% c("COGAR", "BUOED", "CABRA", "PTALC", "TERAX", "MECAL", "PTORI"), 1,0)
sp.df.probpos$target
View(sp.df.probpos)
sp.df.effect$target <- ifelse(sp.df.effect$sp %in% c("COGAR", "BUOED", "CABRA", "PTALC", "TERAX", "MECAL", "PTORI"), 1,0)
palette_target <- c("green","red")
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col=palette_target[sp.df.probpos$target]) # Use this one to produce graph
#â™¥ GRAPH 2D HIGHLIGHT TARGET SPECIES
sp.df.probpos$target <- ifelse(sp.df.probpos$sp %in% c("COGAR", "BUOED", "CABRA", "PTALC", "TERAX", "MECAL", "PTORI"), 2,1)
sp.df.effect$target <- ifelse(sp.df.effect$sp %in% c("COGAR", "BUOED", "CABRA", "PTALC", "TERAX", "MECAL", "PTORI"),2,1)
palette_target <- c("green","red")
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col=palette_target[sp.df.probpos$target]) # Use this one to produce graph
palette_target <- c("blue","red")
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col=palette_target[sp.df.probpos$target]) # Use this one to produce graph
setwd("D:/PhD/Third chapter/Data/Results")
pdf("2D_prob_effect_colours_target.pdf")
par(mfrow = c(2,2),
mar = c(1,3,2,1),
oma = c(3,1,2,1))
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a2, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col = palette_target[sp.df.probpos$target])
abline(v = 75, col = "black", lty = "dashed")
abline(h = 75, col = "black", lty = "dashed")
mtext("Probability of positive effect", line = 1, side = 3)
mtext("AES", line = 3, side = 2, cex = 1)
plot(sp.df.effect$b.a1, sp.df.effect$b.a2, ylim = c(-0.2, 0.6), pch = 19, xlab = " ", ylab = " ", col = palette_target[sp.df.probpos$target])
abline(v = 0, col = "darkgrey", lty = "dashed")
abline(h = 0, col = "darkgrey", lty = "dashed")
mtext("Beta effect size", line = 1, side = 3)
plot(sp.df.probpos$b.a1, sp.df.probpos$b.a3, ylim = c(0,100), pch = 19, xlab = " ", ylab = " ", col = palette_target[sp.df.probpos$target])
abline(v = 75, col = "black", lty = "dashed")
abline(h = 75, col = "black", lty = "dashed")
mtext("GREEN", line = 3, side = 2, cex = 1)
mtext("TFM", line = 3, side = 1, cex = 1)
plot(sp.df.effect$b.a1, sp.df.effect$b.a3, ylim = c(-0.2, 0.6), pch = 19, xlab = " ", ylab = " ", col = palette_target[sp.df.probpos$target])
abline(h = 0, col = "darkgrey", lty = "dashed")
abline(v = 0, col = "darkgrey", lty = "dashed")
mtext("TFM", line = 3, side = 1, cex = 1)
dev.off()
install.packages("moveVis")
install.packages('move', 'raster', 'ggplot2')
install.packages("Rtools")
library(moveVis)
library(move)
library(raster)
library(ggplot2)
library(dplyr)
library(readr)
TT_move <- read_delim("D:/PhD/Otros/SisÃ³n/TT_move_ok.csv",";", escape_double = FALSE, col_types = cols(Date = col_date(format = "%d/%m/%Y"),Time = col_time(format = "%H:%M:%S")), trim_ws = TRUE)
View(TT_move)
time_stack <- as.POSIXct(paste(TT_move$Date, TT_move$Time), format = "%Y-%m-%d %H:%M:%S",tz="UTC")
#Afegeixo aquest objecte al data frame
TT_move <- cbind(TT_move, time_stack)
#Converteixo dataframe a move object
http://movevis.org/reference/df2move.html
tt_cat<-df2move(TT_move, "+proj=longlat +ellps=WGS84 +datum=WGS84
+no_defs", "Longitude", "Latitude", time="time_stack", track_id = "ID")
tt_cat<-df2move(TT_move, "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0",
"Longitude", "Latitude", time="time_stack", track_id = "ID")
TT_move
head(TT_move)
TT_move <- read_delim("D:/PhD/Otros/SisÃ³n/TT_move_ok.csv",";", escape_double = FALSE, col_types = cols(Date = col_date(format = "%d/%m/%Y"),Time = col_time(format = "%H:%M:%S")), trim_ws = TRUE)
View(TT_move)
#Converteixo data i hora a un Objecte de classe POSIXct
time_stack <- as.POSIXct(paste(TT_move$Date, TT_move$Time), format = "%Y-%m-%d %H:%M:%S",tz="UTC")
head(TT_move)
TT_move2 <- TT_move[,c(4,5,7)]
TT_move2
class(TT_move)
TT_move2 <- as.data.frame(TT_move[,c(4,5,7)])
TT_move2
TT_move$Longitude
TT_move$Latitude
TT_move2$Longitude <- as.numeric(TT_move2$Longitude)
TT_move2$Longitude
TT_move2 <- complete.cases(TT_move2)
TT_move2 <- as.data.frame(TT_move[,c(4,5,7)])
TT_move2$Longitude <- as.numeric(TT_move2$Longitude)
TT_move2 <- TT_move2[which(complete.cases(TT_move2)), ]
#Afegeixo aquest objecte al data frame
TT_MOVE <- cbind(TT_move2, time_stack)
TT_move <- read_delim("D:/PhD/Otros/SisÃ³n/TT_move_ok.csv",";", escape_double = FALSE, col_types = cols(Date = col_date(format = "%d/%m/%Y"),Time = col_time(format = "%H:%M:%S")), trim_ws = TRUE)
TT_move <- read_delim("D:/PhD/Otros/SisÃ³n/TT_move_ok.csv",";", escape_double = FALSE, col_types = cols(Date = col_date(format = "%d/%m/%Y"),Time = col_time(format = "%H:%M:%S")), trim_ws = TRUE)
TT_move$Longitude <- as.numeric(TT_move$Longitude)
TT_move <- TT_move2[which(complete.cases(TT_move)), ]
TT_move <- read_delim("D:/PhD/Otros/SisÃ³n/TT_move_ok.csv",";", escape_double = FALSE, col_types = cols(Date = col_date(format = "%d/%m/%Y"),Time = col_time(format = "%H:%M:%S")), trim_ws = TRUE)
TT_move$Longitude <- as.numeric(TT_move$Longitude)
View(TT_move)
head(TT_move)
TT_move <- as.data.frame(TT_move[,c(2,3,4,5,7)])
head(TT_move)
TT_move <- TT_move2[which(complete.cases(TT_move)), ]
time_stack <- as.POSIXct(paste(TT_move$Date, TT_move$Time), format = "%Y-%m-%d %H:%M:%S",tz="UTC")
#Afegeixo aquest objecte al data frame
TT_MOVE <- cbind(TT_move, time_stack)
TT_move <- read_delim("D:/PhD/Otros/SisÃ³n/TT_move_ok.csv",";", escape_double = FALSE, col_types = cols(Date = col_date(format = "%d/%m/%Y"),Time = col_time(format = "%H:%M:%S")), trim_ws = TRUE)
TT_move$Longitude <- as.numeric(TT_move$Longitude)
TT_move <- as.data.frame(TT_move[,c(2,3,4,5,7)])
TT_move <- TT_move[which(complete.cases(TT_move)), ]
time_stack <- as.POSIXct(paste(TT_move$Date, TT_move$Time), format = "%Y-%m-%d %H:%M:%S",tz="UTC")
#Afegeixo aquest objecte al data frame
TT_MOVE <- cbind(TT_move, time_stack)
tt_cat<-df2move(TT_MOVE, "+proj=longlat +ellps=WGS84 +datum=WGS84
+no_defs", "Longitude", "Latitude", time="time_stack", track_id = "ID")
head(TT_move)
TT_move <- TT_move[ ,c(3,4,5)]
#Afegeixo aquest objecte al data frame
TT_MOVE <- cbind(TT_move, time_stack)
tt_cat<-df2move(TT_MOVE, "+proj=longlat +ellps=WGS84 +datum=WGS84
+no_defs", "Longitude", "Latitude", time="time_stack", track_id = "ID")
View(TT_MOVE)
duplicated(TT_MOVE$time_stack)
which(duplicated(TT_MOVE$time_stack))
TT_MOVE$time_stack[which(duplicated(TT_MOVE$time_stack))]
TT_MOVE <- TT_MOVE[ -which(duplicated(TT_MOVE$time_stack)), ]
tt_cat<-df2move(TT_MOVE, "+proj=longlat +ellps=WGS84 +datum=WGS84
+no_defs", "Longitude", "Latitude", time="time_stack", track_id = "ID")
#Â©aixÃ² son descriptius de les dades
unique(timestamps(tt_cat))
timeLag(tt_catt, unit = "days")
timeLag(tt_cat, unit = "days")
