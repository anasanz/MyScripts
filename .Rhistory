cont_zero_dev[i]<- as.numeric(cont_zero[i]) #if its FALSE (0) is significant deviations (it does not conatain 0)
}
cont_zero_dev <- ifelse(cont_zero_dev == 0, 1, 0) # swith for plot (significant deviations are represented by 1)
##############################################################################################################
################################           Output HDS              ##########################################
###########################################################################################################
setwd("S:/PhD/Second chapter/Data/Results/TRIM/compiled_final")
load(paste("HDS_",s_good[xxx],".RData", sep = ""))
summary <- as.data.frame(out$summary)
results <- summary[which(rownames(summary) %in% c("popindex[1]", "popindex[2]", "popindex[3]", "popindex[4]", "popindex[5]", "popindex[6]", "popindex[7]", "popindex[8]", "popindex[9]",
"mu.lam.site", "sig.lam.site", "bzB.sig" , "bYear.lam")), ]
year_dev <- summary[grep("log.lambda.year", rownames(summary)), c(1,3,7,10)]
year_dev_hds <- year_dev$overlap0
year_dev_hds <- ifelse(year_dev_hds == 0, 1, 0)
year_dev_hds[1] <- 0
# CALCULATE CI
# Based on expected N
yrs2 <- c(0, 1, 2, 3, 4, 5, 6, 7, 8)
# 1. Calculate predictions for both zones
outall <- do.call(rbind,out$samples)
# Total population (since both follow the same trend)
pred.exp <- matrix(NA, dim(outall)[1], length(yrs2))
for(i in 1:dim(outall)[1]){
##calculate population, year 1
pred.exp[i,1] <- as.vector(outall[i,"lam.tot[1]"])
##calculate populations, year 2-8, based on beta(Year)
for (t in 2:length(yrs2)){
pred.exp[i,t] <- pred.exp[i,(t-1)] * # Here I add the starting population size as a baseline for the trend
exp(outall[i,"bYear.lam"])
}
}
predall.exp <- pred.exp
lci.exp <- uci.exp <- mean.pred.exp <- 0
for(i in 1:length(yrs2)){
lci.exp[i]  <- quantile(predall.exp[,i],probs = 0.025)
uci.exp[i]  <- quantile(predall.exp[,i],probs = 0.975)
mean.pred.exp[i]  <- mean(predall.exp[,i])
}
est_hds <- round(results[3,1],2)
significance_est_hds <- ifelse(results[3,10] == 0,
paste(est_hds,"*", sep = ""),
est_hds)
##############################################################################################################
################################           PLOT                   ##########################################
###########################################################################################################
#Plot Both
max_range <- max(uci.exp,tot$imputed, out$summary[grep("popindex", rownames(out$summary)),1])
yrs2 <- c(2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018)
# Load function with both graphs. You should have loaded first all results from both trim and hds to run this function
setwd("S:/PhD/MyScripts/Ch. 2-3/Ch. 2/Results")
source("plot_trim_hds2.R")
plot.trim.hds.overall_yo2(overall(m3), yrange = c(0, max_range))
################################################################
# If only the function for trim is runned(plot.trim.overall_yo), you have to run this for the hds model:
# PLOT HDS
#polygon( x = c(yrs2, rev(yrs2)),
#         y = c(lci.exp, rev(uci.exp)),
#         col = adjustcolor(c("grey"),alpha.f = 0.6),
#         border = NA)
#
#points(yrs2, out$summary[grep("popindex", rownames(out$summary)),1], pch = 19, type = "l", col= adjustcolor("black",alpha.f = 0.4))
#points(yrs2, out$summary[grep("popindex", rownames(out$summary)),1], pch = 19, type = "p", col= "white", cex = 1.5)
#points(yrs2, out$summary[grep("popindex", rownames(out$summary)),1], pch = 19, type = "p", col= adjustcolor("black",alpha.f = 0.4), cex = 1.5)
#
#points(mean.pred.exp ~ yrs2, type="l", col= "black", lwd = 2)
mtext("Number of individuals", side = 2, line = 1, cex = 0.8, outer = TRUE)
mtext("Year", side = 1, line = 2, cex = 0.8, outer = TRUE)
}
dev.off()
s_good <- c("ALRUF","BUOED","CACAR","COOEN","COPAL","GACRI","GATHE","MEAPI","MECAL","PAMAJ","SESER","STSSP","SYCAN","SYMEL","TERAX","UPEPO",
"MICAL","HIRUS","PADOM","PIPIC","PAMON", "COMON")
rm(list=ls())
library(dplyr)
##############################################################################################################
################################           Temperature              ##########################################
###########################################################################################################
#### Check effect of temperature for species where it is significant for m6
s_good <- c("ALRUF","BUOED","CACAR","COOEN","COPAL","GACRI","GATHE","MEAPI","MECAL","PAMAJ","SESER","STSSP","SYCAN","SYMEL","TERAX","UPEPO",
"MICAL","HIRUS","PADOM","PIPIC","PAMON", "COMON") # It has to be in this order because the list is in this order
##### Value for CI #####
# Load data
setwd("S:/PhD/Second chapter/Data/Results/TRIM/6temp/Final")
load("spConvergence_light_FINAL.RData")
temp <- data.frame(matrix(NA,ncol = 5,nrow = length(s_good)))
colnames(temp) <- c("sp", "est", "lci", "uci", "over_0")
for (i in 1:length(s_good)) {
sum <- data.frame(species[[i]][[2]])
est_temp <- sum[which(rownames(sum) %in% "bTemp.sig"), c(1,3,7,10)]
temp[i,1] <- s_good[i]
temp[i,c(2:5)] <- est_temp
}
temp_sig <- temp[which(temp$over_0 == 0), ] # Species which detection is detected by temperature
s_temp <- temp_sig$sp
##############################################################################################################
######################           Bayesian p-values                ##########################################
###########################################################################################################
# Join Bayesian p-values
# Observation model
Bp6 <- data.frame(matrix(NA,ncol = 5,nrow = length(s_good)))
colnames(Bp6) <- c("sp", "Bp.Obs", "lci", "uci", "over_0")
for (i in 1:length(s_good)) {
sum <- data.frame(species[[i]][[2]])
est_Bp6 <- sum[which(rownames(sum) %in% "Bp.Obs"), c(1,3,7,10)]
Bp6[i,1] <- s_good[i]
Bp6[i,c(2:5)] <- est_Bp6
}
Bp6 <- Bp6[,c(1,2)]
Bp6_bad <- Bp6[which(Bp6$Bp.Obs < 0.1 | Bp6$Bp.Obs > 0.9), ] # Bad bayesian p-values
# Join with temperature
tab1 <- left_join(temp,Bp6, by = "sp")
# Abundance model
BpN6 <- data.frame(matrix(NA,ncol = 5,nrow = length(s_good)))
colnames(BpN6) <- c("sp", "Bp.N", "lci", "uci", "over_0")
for (i in 1:length(s_good)) {
sum <- data.frame(species[[i]][[2]])
est_BpN6 <- sum[which(rownames(sum) %in% "Bp.N"), c(1,3,7,10)]
BpN6[i,1] <- s_good[i]
BpN6[i,c(2:5)] <- est_BpN6
}
BpN6 <- BpN6[,c(1,2)]
BpN6_bad <- BpN6[which(BpN6$Bp.Obs < 0.1 | BpN6$Bp.Obs > 0.9), ] # Bad bayesian p-values
# Join all
tab2 <- left_join(tab1,BpN6, by = "sp")
tab2[,c(2,3,4,6,7)] <- round(tab2[,c(2,3,4,6,7)], digits = 3)
tab2$CI <- paste("[", tab2$lci, " - ", tab2$uci, "]", sep = "")
tab2
tab2 <- tab2[ ,c(1,2,8,6,7)]
tab2
write.csv(tab2, "Table1_withHR.csv")
setwd("S:/PhD/Second chapter/Data/Results/Paper")
write.csv(tab2, "Table1_withHR.csv")
#### Check effect of temperature for species where it is significant for m6
s_good <- c("ALRUF","BUOED","CACAR","COOEN","COPAL","GACRI","GATHE","MEAPI","MECAL","PAMAJ","SESER","STSSP","SYCAN","SYMEL","TERAX","UPEPO",
"MICAL","HIRUS","PADOM","PIPIC","PAMON", "COMON") # It has to be in this order because the list is in this order
s_good <- sort(s_good)
##### Value for CI #####
# Load data
setwd("S:/PhD/Second chapter/Data/Results/TRIM/6temp/Final")
load("spConvergence_light_FINAL.RData")
temp <- data.frame(matrix(NA,ncol = 5,nrow = length(s_good)))
colnames(temp) <- c("sp", "est", "lci", "uci", "over_0")
for (i in 1:length(s_good)) {
sum <- data.frame(species[[i]][[2]])
est_temp <- sum[which(rownames(sum) %in% "bTemp.sig"), c(1,3,7,10)]
temp[i,1] <- s_good[i]
temp[i,c(2:5)] <- est_temp
}
temp_sig <- temp[which(temp$over_0 == 0), ] # Species which detection is detected by temperature
s_temp <- temp_sig$sp
##############################################################################################################
######################           Bayesian p-values                ##########################################
###########################################################################################################
# Join Bayesian p-values
# Observation model
Bp6 <- data.frame(matrix(NA,ncol = 5,nrow = length(s_good)))
colnames(Bp6) <- c("sp", "Bp.Obs", "lci", "uci", "over_0")
for (i in 1:length(s_good)) {
sum <- data.frame(species[[i]][[2]])
est_Bp6 <- sum[which(rownames(sum) %in% "Bp.Obs"), c(1,3,7,10)]
Bp6[i,1] <- s_good[i]
Bp6[i,c(2:5)] <- est_Bp6
}
Bp6 <- Bp6[,c(1,2)]
Bp6_bad <- Bp6[which(Bp6$Bp.Obs < 0.1 | Bp6$Bp.Obs > 0.9), ] # Bad bayesian p-values
# Join with temperature
tab1 <- left_join(temp,Bp6, by = "sp")
# Abundance model
BpN6 <- data.frame(matrix(NA,ncol = 5,nrow = length(s_good)))
colnames(BpN6) <- c("sp", "Bp.N", "lci", "uci", "over_0")
for (i in 1:length(s_good)) {
sum <- data.frame(species[[i]][[2]])
est_BpN6 <- sum[which(rownames(sum) %in% "Bp.N"), c(1,3,7,10)]
BpN6[i,1] <- s_good[i]
BpN6[i,c(2:5)] <- est_BpN6
}
BpN6 <- BpN6[,c(1,2)]
BpN6_bad <- BpN6[which(BpN6$Bp.Obs < 0.1 | BpN6$Bp.Obs > 0.9), ] # Bad bayesian p-values
# Join all
tab2 <- left_join(tab1,BpN6, by = "sp")
tab2[,c(2,3,4,6,7)] <- round(tab2[,c(2,3,4,6,7)], digits = 3)
tab2$CI <- paste("[", tab2$lci, " - ", tab2$uci, "]", sep = "")
tab2 <- tab2[ ,c(1,2,8,6,7)]
setwd("S:/PhD/Second chapter/Data/Results/Paper")
write.csv(tab2, "Table1_withHR.csv")
tab2
#### Check effect of temperature for species where it is significant for m6
s_good <- c("ALRUF","BUOED","CACAR","COOEN","COPAL","GACRI","GATHE","MEAPI","MECAL","PAMAJ","SESER","STSSP","SYCAN","SYMEL","TERAX","UPEPO",
"MICAL","HIRUS","PADOM","PIPIC","PAMON", "COMON") # It has to be in this order because the list is in this order
##### Value for CI #####
# Load data
setwd("S:/PhD/Second chapter/Data/Results/TRIM/6temp/Final")
load("spConvergence_light_FINAL.RData")
temp <- data.frame(matrix(NA,ncol = 5,nrow = length(s_good)))
colnames(temp) <- c("sp", "est", "lci", "uci", "over_0")
for (i in 1:length(s_good)) {
sum <- data.frame(species[[i]][[2]])
est_temp <- sum[which(rownames(sum) %in% "bTemp.sig"), c(1,3,7,10)]
temp[i,1] <- s_good[i]
temp[i,c(2:5)] <- est_temp
}
temp_sig <- temp[which(temp$over_0 == 0), ] # Species which detection is detected by temperature
s_temp <- temp_sig$sp
##############################################################################################################
######################           Bayesian p-values                ##########################################
###########################################################################################################
# Join Bayesian p-values
# Observation model
Bp6 <- data.frame(matrix(NA,ncol = 5,nrow = length(s_good)))
colnames(Bp6) <- c("sp", "Bp.Obs", "lci", "uci", "over_0")
for (i in 1:length(s_good)) {
sum <- data.frame(species[[i]][[2]])
est_Bp6 <- sum[which(rownames(sum) %in% "Bp.Obs"), c(1,3,7,10)]
Bp6[i,1] <- s_good[i]
Bp6[i,c(2:5)] <- est_Bp6
}
Bp6 <- Bp6[,c(1,2)]
Bp6_bad <- Bp6[which(Bp6$Bp.Obs < 0.1 | Bp6$Bp.Obs > 0.9), ] # Bad bayesian p-values
# Join with temperature
tab1 <- left_join(temp,Bp6, by = "sp")
# Abundance model
BpN6 <- data.frame(matrix(NA,ncol = 5,nrow = length(s_good)))
colnames(BpN6) <- c("sp", "Bp.N", "lci", "uci", "over_0")
for (i in 1:length(s_good)) {
sum <- data.frame(species[[i]][[2]])
est_BpN6 <- sum[which(rownames(sum) %in% "Bp.N"), c(1,3,7,10)]
BpN6[i,1] <- s_good[i]
BpN6[i,c(2:5)] <- est_BpN6
}
BpN6 <- BpN6[,c(1,2)]
BpN6_bad <- BpN6[which(BpN6$Bp.Obs < 0.1 | BpN6$Bp.Obs > 0.9), ] # Bad bayesian p-values
# Join all
tab2 <- left_join(tab1,BpN6, by = "sp")
tab2[,c(2,3,4,6,7)] <- round(tab2[,c(2,3,4,6,7)], digits = 3)
tab2$CI <- paste("[", tab2$lci, " - ", tab2$uci, "]", sep = "")
tab2 <- tab2[ ,c(1,2,8,6,7)]
tab3 <- arrange(tab2, sp)
tab3
setwd("S:/PhD/Second chapter/Data/Results/Paper")
write.csv(tab3, "Table1_withHR.csv")
s_good <- c("ALRUF","BUOED","CACAR","COOEN","COPAL","GACRI","GATHE","MEAPI","MECAL","PAMAJ","SESER","STSSP","SYCAN","SYMEL","TERAX","UPEPO",
"MICAL","HIRUS","PADOM","PIPIC","PAMON", "COMON")
s_good <- sort(s_good)
# Create table to store sd for observer and year (mean estimate of sigma), and also the mode
# Sigma estimates for year and observer in table 2 is high, but in the figure S3 and S5 the CI are overlapping
# Estimate the MODE of sigma appart from the mean (and/or plot the posteriors?)
year_obs <- as.data.frame(matrix(NA, ncol = 8, nrow = length(s_good)))
colnames(year_obs) <- c("species", "mean_year_sd", "95CI_mean_year", "mode_year_sd", "mean_observer_sd", "95CI_mean_obs", "mode_obs_sd", "mean_ab")
year_obs$species <- s_good
for (xxx in 1:length(s_good)){
setwd("S:/PhD/Second chapter/Data/Results/TRIM/compiled_final")
load(paste("HDS_",s_good[xxx],".RData", sep = ""))
outall <- do.call(rbind,out$samples) # 3 chains together (for calculating the mode)
sum <- as.data.frame(out$summary)
sum <- round(sum,3)
# YEAR
# Mean of the year sd and its associated 95% BCI
sigyear <- sum[which(rownames(sum) == "sig.sig.year"), ]
year_obs[xxx, 2] <- sigyear$mean
year_obs[xxx, 3] <- paste("[", sigyear$`2.5%`, " - ", sigyear$`97.5%`, "]", sep = "")
# Mode of the year sd
dens_year <- density(outall[ ,which(colnames(outall) == "sig.sig.year")]) # Density of iterations for sig.obs
# the output of density has an x and a y value, where x corresponds to the values in your chains,
# and y is the corresponding density of a given value (ie, how frequently it occurs in your chains).
mode_year <- dens_year$x[dens_year$y == max(dens_year$y)]
# you can extract the value of x that corresponds to the highest density (value of y): that is your MODE
year_obs[xxx, 4] <- mode_year
# OBSERVER
# Mean of the observer sd and its associated 95% BCI
sigobs <- sum[which(rownames(sum) == "sig.sig"), ]
year_obs[xxx, 5] <- sigobs$mean
year_obs[xxx, 6] <- paste("[", sigobs$`2.5%`, " - ", sigobs$`97.5%`, "]", sep = "")
# Mode of the observer sd
dens_obs <- density(outall[ ,which(colnames(outall) == "sig.sig")]) # Density of iterations for sig.obs
# the output of density has an x and a y value, where x corresponds to the values in your chains,
# and y is the corresponding density of a given value (ie, how frequently it occurs in your chains).
mode_obs <- dens_obs$x[dens_obs$y == max(dens_obs$y)]
# you can extract the value of x that corresponds to the highest density (value of y): that is your MODE
year_obs[xxx, 7] <- mode_obs
yearly_abundances <- sum[grep("popindex", rownames(sum)),1]
year_obs[xxx, 8] <- mean(yearly_abundances) # average abundance
}
year_obs$mean_ab <- round(year_obs$mean_ab,3)
year_obs$mode_year_sd <- round(year_obs$mode_year_sd,3)
year_obs$mode_obs_sd <- round(year_obs$mode_obs_sd,3)
rm(list=ls())
library(rjags)
library(jagsUI)
library(dplyr)
library(rtrim)
# Compare methods using the HDS model 6. Same as comparemethods6 but using the HAZARD RATE detection function on the
# species that have bad bayesian p-values
###################################################################
##                       Prepare data                           ###
###################################################################
setwd("S:/PhD/Second chapter/Data")
d <- read.csv("DataDS_ready_ALL.csv")
colnames(d)[which(colnames(d) == "Count")] <- "Cluster"
setwd("S:/PhD/Second chapter/Data")
s <- read.csv("sp_trend_dg.csv", sep = ";")
s_good <- as.vector(s$Species[which(s$include_samplesize == 1)])
remove_6 <- c("CACHL", "CAINA", "CIJUN", "COCOT", "COLIV", "LUARB", "LUMEG", "MIMIG", "OEHIS", "ORORI", "PIVIR", "PYRAX", "STUNI", "STVUL", "TUMER", "TUVIS")
s_good <- s_good[-which(s_good %in% remove_6)] # SPECIES THAT CONVERGE FOR MODEL 6
# TAKE SPECIES WITH BAD BP-VALUES
setwd("S:/PhD/Second chapter/Data/Results/TRIM/6temp")
load("spConvergence_light.RData")
Bp6 <- data.frame(matrix(NA,ncol = 5,nrow = length(s_good)))
colnames(Bp6) <- c("sp", "Bp.Obs", "lci", "uci", "over_0")
for (i in 1:length(s_good)) {
dat <- data.frame(species[[i]][[2]])
est_Bp6 <- dat[which(rownames(dat) %in% "Bp.Obs"), c(1,3,7,10)]
Bp6[i,1] <- s_good[i]
Bp6[i,c(2:5)] <- est_Bp6
}
Bp6_bad <- Bp6[which(Bp6$Bp.Obs < 0.1 | Bp6$Bp.Obs > 0.9), ]
sbp <- Bp6_bad$sp
# REMOVE CIAER AND FATIN BECAUSE THE DF IS NOT DECREASING WITH DISTANCE (SEE WITH SCRIPT BpObs_detectfunc.r)???
# leave like this by the moment
s_good <- sbp
xxx = 1
d_tr <- d[ ,which(colnames(d) %in% c("Species",  "T_Y", "Observer", "Temp"))]
d_tr_all <- data.frame(T_Y = unique(d_tr$T_Y), id = NA)
d_tr$Observer <- as.character(d_tr$Observer)
d_tr_all_obs <- left_join(d_tr_all, d_tr)
d_tr_all_obs <- d_tr_all_obs[ ,c(1,4,5)]
d_tr_all_obs <- d_tr_all_obs[which(!duplicated(d_tr_all_obs)), ] # Table with all sampled fields, which observer sampled it and wind and temperature
sp <- d[which(d$Species == s_good[xxx]), which(colnames(d) %in% c("Year", "Banda", "transectID", "T_Y", "Species", "Observer", "Cluster", "Temp"))] # Select species spAL and all years
sp <- arrange(sp, Year, transectID) #Ordered
sp_detec_transectID <- unique(sp$transectID)
sp$Observer <- as.character(sp$Observer)
absent <- anti_join(d_tr_all,sp) # Transects with 0 abundance, add to sp.
colnames(absent)[2] <- "Banda" # Format it to add the rows to sp
absent$T_Y <- as.character(absent$T_Y)
absent$Species <- s_good[xxx]
absent$Cluster <- NA
absent <- left_join(absent, d_tr_all_obs)
for (i in 1:nrow(absent)){ # Format to join absent - detections
cent <- substr(absent$T_Y[i], 10,10) # To include SI102 (cents)
cent <- as.numeric(cent)
if(is.na(cent)){
absent$Year[i] <- substr(absent$T_Y[i], 6,9)
absent$transectID[i] <- substr(absent$T_Y[i], 1,4)
} else { absent$Year[i] <- substr(absent$T_Y[i], 7,10)
absent$transectID[i] <- substr(absent$T_Y[i], 1,5)}
}
absent$count <- 0
sp$count <- 1
all_sp <- rbind(sp,absent) # Include transects with abundance 0
all_sp <- arrange(all_sp, Year, transectID) # Ordered
absent$count <- 0
###################################################################
##                       HDS ANALYSIS                           ###
###################################################################
# ---- Information: bins, years, sites ----
strip.width <- 200
dist.breaks <- c(0,25,50,100,200)
int.w <- diff(dist.breaks) # width of distance categories (v)
midpt <- diff(dist.breaks)/2+dist.breaks[-5]
nG <- length(dist.breaks)-1
yrs <- c(2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018) # I HAVE TO CONVERT THIS FROM 0-7 (but nyrs is still 8!)
nyrs <- length(yrs)
# ---- Distance observations ----
# Format
all.sites <- unique(all_sp$transectID)
all.sites <- sort(all.sites,descreasing = TRUE)
max.sites <- length(all.sites)
m <- matrix(NA, nrow = length(all.sites), ncol = nyrs)
rownames(m) <- all.sites
colnames(m) <- yrs
# Add counts > 0
count <- aggregate(Species ~ Year + transectID, FUN = length, data = sp)
for (i in 1:nrow(count)){
m[which(rownames(m) %in% count$transectID[i]), which(colnames(m) %in% count$Year[i])] <- count$Species[i]
}
# Add absences (0)
for (i in 1:nrow(absent)){
m[which(rownames(m) %in% absent$transectID[i]), which(colnames(m) %in% absent$Year[i])] <- absent$count[i]
}
# Only to check: Count of individuals per year
count.year <- colSums(m,na.rm = TRUE)
# Count of individuals per year corrected by cluster size
average_clus <- mean(sp$Cluster) # TO INCLUDE IN THE MODEL
count.year_clus <- count.year*average_clus
# Year
yrs2 <- c(0, 1, 2, 3, 4, 5, 6, 7, 8) # To make it as a continuous variable, otherwise it doesnt work
year <- matrix(NA,nrow = max.sites, ncol = nyrs)
colnames(year) <- yrs
for (i in 1:nyrs){
year[ ,which(colnames(year) %in% yrs[i])] <- rep(yrs2[i], max.sites)
}
# Observer
# Format
obs <- matrix(NA, nrow = max.sites, ncol = nyrs)
rownames(obs) <- all.sites
colnames(obs) <- yrs
# Add observers for fields with counts > 0
for (i in 1:nrow(sp)){
obs[which(rownames(obs) %in% sp$transectID[i]), which(colnames(obs) %in% sp$Year[i])] <- sp$Observer[i]
}
# Add observers for fields with absences (0)
for (i in 1:nrow(absent)){
obs[which(rownames(obs) %in% absent$transectID[i]), which(colnames(obs) %in% absent$Year[i])] <- absent$Observer[i]
}
unique(obs)
# Temperature
# Format
temp <- matrix(NA, nrow = max.sites, ncol = nyrs)
rownames(temp) <- all.sites
colnames(temp) <- yrs
# Add temper for fields with counts > 0
for (i in 1:nrow(sp)){
temp[which(rownames(temp) %in% sp$transectID[i]), which(colnames(temp) %in% sp$Year[i])] <- sp$Temp[i]
}
# Add temper for fields with absences (0)
for (i in 1:nrow(absent)){
temp[which(rownames(temp) %in% absent$transectID[i]), which(colnames(temp) %in% absent$Year[i])] <- absent$Temp[i]
}
# ---- Specify data in JAGS format ----
# Distance class and ind
nind <- nrow(sp)
dclass <- sp$Banda
m  # Counts per year and site
# Co-variates
yrs <- 1:9
year_number <- 0:8
# Matrix with observers
ob <- matrix(as.numeric(factor(obs)), nrow = max.sites, ncol = nyrs) # JAGS doesn't accept categorical variables
unique(factor(ob))
obs_id <- unique(factor(ob))[-1]
ob[which(is.na(ob))] <- sample(obs_id, length(which(is.na(ob))), replace = TRUE) # No NA in covariate
nobs <- length(unique(factor(ob)))
# Matrix with temperature (put random values where NA)
unique(factor(temp))
temp_id <- unique(factor(temp))[-1]
temp[which(is.na(temp))] <- sample(temp_id, length(which(is.na(temp))), replace = TRUE) # No NA in covariate
#temp_mean <- mean(temp)
#temp_sd <- sd(temp)
#temp_sc <- (temp - temp_mean) / temp_sd
# Index for random effects
site <- c(1:max.sites)
year <- c(1:nyrs)
sitesYears <- NULL
for (i in 1:nyrs){
sitesYears <- c(sitesYears,c(1:length(all.sites)))}
# Fixed index to map dclass onto site and year
# For the index, create a matrix m where NA are 0 (because I need the same length)
m_index <- m
m_index[which(is.na(m_index))] <- 0
site.dclass <- year.dclass <- NULL
for (t in 1:nyrs){ # sites has to be nested on years because dclass first indexes the sites on the same year
for (j in 1:max.sites){
site.dclass <- c(site.dclass, rep(j, m_index[j,t]))
year.dclass <- c(year.dclass, rep(t, m_index[j,t]))
} }
temp
18/22
4/22
s_good <- c("ALRUF","BUOED","CACAR","COOEN","COPAL","GACRI","GATHE","MEAPI","MECAL","PAMAJ","SESER","STSSP","SYCAN","SYMEL","TERAX","UPEPO",
"MICAL","HIRUS","PADOM","PIPIC","PAMON", "COMON")
s_good <- sort(s_good)
# Create table to store sd for observer and year (mean estimate of sigma), and also the mode
# Sigma estimates for year and observer in table 2 is high, but in the figure S3 and S5 the CI are overlapping
# Estimate the MODE of sigma appart from the mean (and/or plot the posteriors?)
year_obs <- as.data.frame(matrix(NA, ncol = 8, nrow = length(s_good)))
colnames(year_obs) <- c("species", "mean_year_sd", "95CI_mean_year", "mode_year_sd", "mean_observer_sd", "95CI_mean_obs", "mode_obs_sd", "mean_ab")
year_obs$species <- s_good
for (xxx in 1:length(s_good)){
setwd("S:/PhD/Second chapter/Data/Results/TRIM/compiled_final")
load(paste("HDS_",s_good[xxx],".RData", sep = ""))
outall <- do.call(rbind,out$samples) # 3 chains together (for calculating the mode)
sum <- as.data.frame(out$summary)
sum <- round(sum,3)
# YEAR
# Mean of the year sd and its associated 95% BCI
sigyear <- sum[which(rownames(sum) == "sig.sig.year"), ]
year_obs[xxx, 2] <- sigyear$mean
year_obs[xxx, 3] <- paste("[", sigyear$`2.5%`, " - ", sigyear$`97.5%`, "]", sep = "")
# Mode of the year sd
dens_year <- density(outall[ ,which(colnames(outall) == "sig.sig.year")]) # Density of iterations for sig.obs
# the output of density has an x and a y value, where x corresponds to the values in your chains,
# and y is the corresponding density of a given value (ie, how frequently it occurs in your chains).
mode_year <- dens_year$x[dens_year$y == max(dens_year$y)]
# you can extract the value of x that corresponds to the highest density (value of y): that is your MODE
year_obs[xxx, 4] <- mode_year
# OBSERVER
# Mean of the observer sd and its associated 95% BCI
sigobs <- sum[which(rownames(sum) == "sig.sig"), ]
year_obs[xxx, 5] <- sigobs$mean
year_obs[xxx, 6] <- paste("[", sigobs$`2.5%`, " - ", sigobs$`97.5%`, "]", sep = "")
# Mode of the observer sd
dens_obs <- density(outall[ ,which(colnames(outall) == "sig.sig")]) # Density of iterations for sig.obs
# the output of density has an x and a y value, where x corresponds to the values in your chains,
# and y is the corresponding density of a given value (ie, how frequently it occurs in your chains).
mode_obs <- dens_obs$x[dens_obs$y == max(dens_obs$y)]
# you can extract the value of x that corresponds to the highest density (value of y): that is your MODE
year_obs[xxx, 7] <- mode_obs
yearly_abundances <- sum[grep("popindex", rownames(sum)),1]
year_obs[xxx, 8] <- mean(yearly_abundances) # average abundance
}
year_obs$mean_ab <- round(year_obs$mean_ab,3)
year_obs$mode_year_sd <- round(year_obs$mode_year_sd,3)
year_obs$mode_obs_sd <- round(year_obs$mode_obs_sd,3)
year_obs
year_mean <- arrange(year_obs, mean_year_sd) # COOEN,PAMAJ,SESER,PIPIC,BUOED (>3q)
# Summary statistics
library(dplyr)
year_mean <- arrange(year_obs, mean_year_sd) # COOEN,PAMAJ,SESER,PIPIC,BUOED (>3q)
year_mean
# Summary statistics
library(dplyr)
year_mean <- arrange(year_obs, mean_year_sd) # COOEN,PAMAJ,SESER,PIPIC,BUOED (>3q)
year_mean
summary(year_obs$mean_year_sd)
